CREATE PROC [EDAA_ETL].[SP_STG_DW_FCT_DLY_LBR_SLS_FCST_CORRECTION] @DATE [INT] AS

/*
 =============================================
 Author:        Shrikant Sakpal
 Create date:   30-May-2021
 Description:   Stored proc to correct  Hourly Sales Labour Forecast table. Date input parameter required in yyyymmdd format
 =============================================
 Change History
 30-May-2021   SS      Initial version

*/

BEGIN TRY

SET NOCOUNT ON
SET XACT_ABORT ON

/*Datamart Auditing variables*/
DECLARE @NEW_AUD_SKY BIGINT
DECLARE @NBR_OF_RW_ISRT INT
DECLARE @NBR_OF_RW_UDT INT
DECLARE @EXEC_LYR VARCHAR(255)
DECLARE @EXEC_JOB VARCHAR(500)
DECLARE @SRC_ENTY VARCHAR(500)
DECLARE @TGT_ENTY VARCHAR(500)

/*Audit Log Start*/
EXEC EDAA_CNTL.SP_AUDIT_DATA_LOAD_START
 @EXEC_LYR  = 'EDAA_DW'
,@EXEC_JOB  = 'SP_STG_DW_FCT_DLY_LBR_SLS_FCST_CORRECTION'
,@SRC_ENTY  = 'EDAA_STG.FCT_DLY_LBR_SLS_FCST'
,@TGT_ENTY = 'FCT_DLY_LBR_SLS_FCST'
,@NEW_AUD_SKY = @NEW_AUD_SKY OUTPUT



/* Validate Late arriving dimension: DIM_GEO */
PRINT('LATEARRIVINGDIMENSION: DIM_GEO')

IF OBJECT_ID('TEMPDB..#LATEARRIVINGDIMENSIONFACTRECORDS') IS NOT NULL
DROP TABLE #LATEARRIVINGDIMENSIONFACTRECORDS

CREATE TABLE #LATEARRIVINGDIMENSIONFACTRECORDS
WITH (
	DISTRIBUTION = ROUND_ROBIN
	)
AS
SELECT DISTINCT FACT_DATA_FEED.Str_Id,
CASE WHEN GEO.Str_Id IS NULL THEN 1 ELSE 0 END AS IS_GEO_MISSING
FROM
(
SELECT DISTINCT Str_Id
FROM  EDAA_STG.FCT_DLY_LBR_SLS_FCST
) AS FACT_DATA_FEED

LEFT  JOIN	(SELECT DISTINCT Str_Id
				FROM EDAA_DW.DIM_GEO
				--WHERE IS_CURR_IND<>0
					) AS GEO
	ON GEO.Str_Id = FACT_DATA_FEED.Str_Id
	WHERE  GEO.Str_Id IS NULL

DECLARE @NEXT_GEO_HIST_SK INT
SELECT @NEXT_GEO_HIST_SK =ISNULL(MAX(GEO_HIST_SK),0)   FROM EDAA_DW.DIM_GEO

PRINT('LATEARRIVINGDIMENSION: DIM_GEO LOAD')

IF(@NEXT_GEO_HIST_SK IS NOT NULL)
BEGIN


INSERT INTO EDAA_DW.DIM_GEO

SELECT
		   (ROW_NUMBER() OVER (ORDER BY STR_ID)) + @NEXT_GEO_HIST_SK 		AS GEO_HIST_SK
		  ,(ROW_NUMBER() OVER (ORDER BY STR_ID)) + @NEXT_GEO_HIST_SK  		AS GEO_SK
		  ,CONVERT(INTEGER,STR_ID)   								 		AS STR_ID
		  ,CONVERT(VARCHAR(5),'n/a')		STR_NM
		  ,CONVERT(INTEGER,0)				GROSS_FLR_AREA
		  ,CONVERT(VARCHAR(5),'n/a')		RGN_NM
		  ,CONVERT(VARCHAR(5),'n/a')		MKT_NM
		  ,NULL                    AS		LOC_LNGTD
		  ,NULL                    AS		LOC_LTTD
		  ,CONVERT(INTEGER,-1)				STR_CLS_ID
		  ,CONVERT(VARCHAR(5),'n/a')		STR_CLS_NM
		  ,CONVERT(VARCHAR(5),'n/a')		LOC_ST_ID
		  ,CONVERT(VARCHAR(5),'n/a')		LOC_CNTY_ID
		  ,CONVERT(VARCHAR(5),'n/a')		LOC_CTY
		  ,CONVERT(VARCHAR(5),'n/a')		LOC_ZP_CODE
		  ,CONVERT(VARCHAR(5),'n/a')		DIV_ID
		  ,CONVERT(VARCHAR(5),'n/a')		DIV_NM
		  ,NULL                    AS		CURR_YR_NEW_STR_IND
		  ,NULL                    AS		LST_YR_NEW_STR_IND
		  ,NULL                    AS		TWO_YRS_AGO_NEW_STR_IND
		  ,NULL                    AS		RGN_ID
		  ,NULL                    AS		MKT_ID
		  ,NULL                    AS		STR_OPN_DT
		  ,NULL                    AS		STR_CLS_DT
		  ,CONVERT(VARCHAR(5),'n/a')		STR_CTGRY_NM
		  ,NULL                    AS		STR_ZN_ID
		  ,CONVERT(VARCHAR(5),'n/a')		STR_ZN_NM
		  ,NULL                    AS		STR_CMP_CTGRY_ID
		  ,CONVERT(VARCHAR(5),'n/a')		STR_CMP_CTGRY_DESC
		  ,CAST('2000-01-01' AS DATE)	    VLD_FROM
		  ,CAST('2099-01-01' AS DATE)		VLD_TO
		  ,CAST(1 AS BIT)					IS_CURR_IND
		  ,CAST(0 AS BIT)					IS_DMY_IND
		  ,CAST(1 AS BIT)					IS_EMB_IND
		  ,'New embryo'					    ETL_ACTN
		  ,@NEW_AUD_SKY						AUD_INS_SK
		  ,NULL								AUD_UPD_SK

FROM
	(
	SELECT
			DISTINCT STR_ID
	FROM #LATEARRIVINGDIMENSIONFACTRECORDS
	WHERE 	IS_GEO_MISSING = 1
	) AS MISSING_GEO
	WHERE 	NOT EXISTS
	(
	SELECT 1 FROM EDAA_DW.DIM_GEO DIM
	WHERE
	MISSING_GEO.STR_ID = DIM.STR_ID
	)


END

DELETE FROM EDAA_DW.FCT_DLY_LBR_SLS_FCST
WHERE Dt_Sk = @DATE

INSERT INTO EDAA_DW.FCT_DLY_LBR_SLS_FCST
(
Geo_Hist_Sk,
Dt_Sk,
Str_Id,
Typ_Id,
Sch_Dpt_Id,
Job_Id,
Avg_Wge_Rte_Amt,
Hr_Qty,
Hr_Pdtv_Qty,
Sls_Amt,
Wge_Amt,
Wge_Pdtv_Amt,
Aud_Ins_Sk,
Aud_Upd_Sk
)
SELECT 	ISNULL(Geo_Hist_Sk, -1) AS Geo_Hist_Sk,
		Dt_Sk,
		daily_forcast.Str_Id,
		Typ_Id,
		Sch_Dpt_Id,
		Job_Id,
		Avg_Wge_Rte_Amt,
		Hr_Qty,
		Hr_Pdtv_Qty,
		Sls_Amt,
		Wge_Amt,
		Wge_Pdtv_Amt,
		@NEW_AUD_SKY	AS Aud_Ins_Sk,
		NULL 			AS Aud_Upd_Sk
FROM  EDAA_STG.FCT_DLY_LBR_SLS_FCST daily_forcast
LEFT JOIN  EDAA_DW.DIM_GEO geo on geo.Str_Id = daily_forcast.Str_Id AND
CAST(daily_forcast.Dly_Dt as date)>=geo.VLD_FRM AND CAST(daily_forcast.Dly_Dt as date)<=geo.VLD_TO
WHERE daily_forcast.Dt_Sk = @DATE




BEGIN
SELECT @NBR_OF_RW_ISRT = COUNT(1)  FROM EDAA_DW.FCT_DLY_LBR_SLS_FCST WHERE Aud_Ins_Sk = @NEW_AUD_SKY
SELECT @NBR_OF_RW_UDT  = COUNT(1)  FROM EDAA_DW.FCT_DLY_LBR_SLS_FCST WHERE Aud_Upd_Sk = @NEW_AUD_SKY

------------ UPDATE Statistics-------

UPDATE STATISTICS  EDAA_DW.FCT_DLY_LBR_SLS_FCST;

END

/*Audit Log End*/
EXEC EDAA_CNTL.SP_AUDIT_DATA_LOAD_END @AUD_SKY = @NEW_AUD_SKY, @NBR_OF_RW_ISRT = @NBR_OF_RW_ISRT, @NBR_OF_RW_UDT  = @NBR_OF_RW_UDT

END TRY

BEGIN CATCH
DECLARE @ERROR_PROCEDURE_NAME AS VARCHAR(60) = 'EDAA_ETL.SP_STG_DW_FCT_DLY_LBR_SLS_FCST_CORRECTION'
DECLARE @ERROR_LINE AS INT;
DECLARE @ERROR_MSG AS NVARCHAR(max);

 SELECT
      @ERROR_LINE =  ERROR_NUMBER()
       ,@ERROR_MSG = ERROR_MESSAGE();
--------- Log execution error ----------



EXEC EDAA_CNTL.SP_LOG_AUD_ERR
@AUD_SKY = @NEW_AUD_SKY,
@ERROR_PROCEDURE_NAME = @ERROR_PROCEDURE_NAME,
@ERROR_LINE = @ERROR_LINE,
@ERROR_MSG = @ERROR_MSG;

-- Detect the change


   THROW;




END CATCH
GO
