/****** Object:  StoredProcedure [EDAA_ETL].[SP_STG_DW_FCT_DLY_PAYMENT_TENDER_TABLELOAD]    Script Date: 5/5/2023 1:47:26 PM ******/

CREATE PROC [EDAA_ETL].[SP_STG_DW_FCT_DLY_PAYMENT_TENDER_TABLELOAD] AS

/*
 =============================================
 Author:        Krishna Kumar Shaw
 Create date:   26-Dec-2022
 Description:   Stored proc to Load Payment Data on Daily Basis from Synapse Stage Table.
 =============================================
 Change History
 26-Dec-2022   KKS      Initial version
*/
BEGIN TRY
SET NOCOUNT ON
SET XACT_ABORT ON

/*Datamart Auditing variables*/
DECLARE @NEXT_GEO_HIST_SK INT
DECLARE @NEW_AUD_SKY BIGINT
DECLARE @NBR_OF_RW_ISRT INT
DECLARE @NBR_OF_RW_UDT INT
DECLARE @EXEC_LYR VARCHAR(255)='EDAA_DW'
DECLARE @EXEC_JOB VARCHAR(500)='SYNAPSE_DEDICATED_SQL_POOL_FCT_DLY_PAYMENT_TENDER_TABLELOAD'
DECLARE @SRC_ENTY VARCHAR(500)='EDAA_STG.FCT_DLY_PYMT_TNR'
DECLARE @TGT_ENTY VARCHAR(500)='EDAA_DW.FCT_DLY_PYMT_TNR'
DECLARE @RowCount BIGINT
DECLARE @ERROR_PROCEDURE_NAME AS VARCHAR(250) = 'EDAA_ETL.SP_STG_DW_FCT_DLY_PAYMENT_TENDER_TABLELOAD'
DECLARE @ERROR_LINE AS INT
DECLARE @ERROR_MSG AS NVARCHAR(MAX)
DECLARE @IPOP_COUNT AS BIGINT

/*Audit Log Start*/
EXEC EDAA_CNTL.SP_AUDIT_DATA_LOAD_START @EXEC_LYR  = @EXEC_LYR
										,@EXEC_JOB  = @EXEC_JOB
										,@SRC_ENTY  = @SRC_ENTY
										,@TGT_ENTY = @TGT_ENTY
										,@NEW_AUD_SKY = @NEW_AUD_SKY OUTPUT

SET @IPOP_COUNT=(SELECT COUNT(*) FROM (SELECT TOP 1 * FROM EDAA_DW.FCT_DLY_PYMT_TNR) AS T);



--DECLARE @NEXT_GEO_HIST_SK INT
SELECT @NEXT_GEO_HIST_SK =ISNULL(MAX(GEO_HIST_SK),0)   FROM EDAA_DW.DIM_GEO


IF(@NEXT_GEO_HIST_SK IS NOT NULL)
BEGIN
/* Validate Late arriving dimension: DIM_GEO */

WITH LATEARRIVINGDIMENSIONFACTRECORDS AS
(
SELECT DISTINCT FACT_DATA_FEED.Str_Id,
CASE WHEN GEO.Str_Id IS NULL THEN 1 ELSE 0 END AS IS_GEO_MISSING
FROM
(
SELECT DISTINCT Str_Id
FROM  EDAA_STG.FCT_DLY_PYMT_TNR
) AS FACT_DATA_FEED

LEFT  JOIN	(SELECT DISTINCT Str_Id
				FROM EDAA_DW.DIM_GEO
				--WHERE IS_CURR_IND<>0
					) AS GEO
	ON GEO.Str_Id = FACT_DATA_FEED.Str_Id
	WHERE  GEO.Str_Id IS NULL )
INSERT INTO EDAA_DW.DIM_GEO
SELECT
		   (ROW_NUMBER() OVER (ORDER BY STR_ID)) + @NEXT_GEO_HIST_SK 		AS GEO_HIST_SK
		  ,(ROW_NUMBER() OVER (ORDER BY STR_ID)) + @NEXT_GEO_HIST_SK  		AS GEO_SK
		  ,CONVERT(INTEGER,STR_ID)   								 		AS STR_ID
		  ,CONVERT(VARCHAR(5),'n/a')		STR_NM
		  ,CONVERT(INTEGER,0)				GROSS_FLR_AREA
		  ,CONVERT(VARCHAR(5),'n/a')		RGN_NM
		  ,CONVERT(VARCHAR(5),'n/a')		MKT_NM
		  ,NULL                    AS		LOC_LNGTD
		  ,NULL                    AS		LOC_LTTD
		  ,CONVERT(INTEGER,-1)				STR_CLS_ID
		  ,CONVERT(VARCHAR(5),'n/a')		STR_CLS_NM
		  ,CONVERT(VARCHAR(5),'n/a')		LOC_ST_ID
		  ,CONVERT(VARCHAR(5),'n/a')		LOC_CNTY_ID
		  ,CONVERT(VARCHAR(5),'n/a')		LOC_CTY
		  ,CONVERT(VARCHAR(5),'n/a')		LOC_ZP_CODE
		  ,CONVERT(VARCHAR(5),'n/a')		DIV_ID
		  ,CONVERT(VARCHAR(5),'n/a')		DIV_NM
		  ,NULL                    AS		CURR_YR_NEW_STR_IND
		  ,NULL                    AS		LST_YR_NEW_STR_IND
		  ,NULL                    AS		TWO_YRS_AGO_NEW_STR_IND
		  ,NULL                    AS		RGN_ID
		  ,NULL                    AS		MKT_ID
		  ,NULL                    AS		STR_OPN_DT
		  ,NULL                    AS		STR_CLS_DT
		  ,CONVERT(VARCHAR(5),'n/a')		STR_CTGRY_NM
		  ,NULL                    AS		STR_ZN_ID
		  ,CONVERT(VARCHAR(5),'n/a')		STR_ZN_NM
		  ,NULL                    AS		STR_CMP_CTGRY_ID
		  ,CONVERT(VARCHAR(5),'n/a')		STR_CMP_CTGRY_DESC
		  ,CAST('2000-01-01' AS DATE)	    VLD_FROM
		  ,CAST('2099-01-01' AS DATE)		VLD_TO
		  ,CAST(1 AS BIT)					IS_CURR_IND
		  ,CAST(0 AS BIT)					IS_DMY_IND
		  ,CAST(1 AS BIT)					IS_EMB_IND
		  ,'New embryo'				    ETL_ACTN
		  ,@NEW_AUD_SKY						AUD_INS_SK
		  ,NULL								AUD_UPD_SK
FROM
	(
	SELECT
			DISTINCT STR_ID
	FROM LATEARRIVINGDIMENSIONFACTRECORDS
	WHERE 	IS_GEO_MISSING = 1
	) AS MISSING_GEO
	WHERE 	NOT EXISTS
	(
	SELECT 1 FROM EDAA_DW.DIM_GEO DIM
	WHERE
	MISSING_GEO.STR_ID = DIM.STR_ID
	)
END
------------------------------------------
BEGIN
WITH CTE AS (SELECT
		ISNULL(geo.Geo_Hist_Sk, -1) AS GEO_HST_SK,
		ISNULL(CAL.Dt_Sk,-1) AS DT_SK,
		PT.STR_ID,
		PT.STR_BRND_NM,
		PT.STR_TXN_DT,
		PT.FSC_YR_ID,
		PT.FSC_QTR_NM,
		PT.FSC_QTR_SEQ_ID,
		PT.FSC_PRD_NM,
		PT.FSC_PRD_SEQ_ID,
		PT.TXN_TYP_NM,
		PT.WLT_TYP_DESC,
		PT.TXN_STS_DESC,
		PT.TEND_TYP_NM,
		PT.CRD_TYP_DESC,
		PT.CRD_SUB_TYP_DESC,
		PT.RSP_MSG_TXT,
		PT.TXN_CNT,
		PT.APPR_AMT,
		PT.PIN_RCVD_TXT,
		PT.ISUR_BNK_NM,
		PT.POS_REG_NBR_ID,
		PT.OMNI_CHL_IND,
		PT.VOD_RVS_DESC,
		PT.STR_TYP_NM,
		PT.TXN_TY_CNT,
		PT.TXN_LY_CNT,
		PT.TXN_TY_AMT,
		PT.TXN_LY_AMT,
		@NEW_AUD_SKY	AS Aud_Ins_Sk,
		-1	AS Aud_Upd_Sk,
		GETDATE() AS UDT_TS,
		CASE WHEN @IPOP_COUNT>0 THEN 'I' ELSE 'F' END AS UDT_BY

FROM  EDAA_STG.FCT_DLY_PYMT_TNR PT
LEFT JOIN  EDAA_DW.Dim_Dly_Cal CAL ON PT.DT_SK=CAL.DT_SK
LEFT JOIN  EDAA_DW.DIM_GEO geo ON geo.Str_Id = PT.Str_Id AND Is_Curr_Ind=1 )

MERGE [EDAA_DW].[FCT_DLY_PYMT_TNR] AS A
USING CTE AS C
ON ( C.GEO_HST_SK=A.GEO_HST_SK AND
	ISNULL(C.STR_BRND_NM,-1)=ISNULL(A.STR_BRND_NM,-1) AND
	C.DT_SK=A.DT_SK AND
	C.STR_TXN_DT=A.STR_TXN_DT AND
	C.FSC_YR_ID=A.FSC_YR_ID AND
	C.FSC_QTR_NM=A.FSC_QTR_NM AND
	C.FSC_QTR_SEQ_ID=A.FSC_QTR_SEQ_ID AND
	C.FSC_PRD_NM=A.FSC_PRD_NM AND
	A.FSC_PRD_SEQ_ID=A.FSC_PRD_SEQ_ID AND
	C.TXN_TYP_NM=A.TXN_TYP_NM AND
	C.WLT_TYP_DESC=A.WLT_TYP_DESC AND
	C.TXN_STS_DESC=A.TXN_STS_DESC AND
	C.TEND_TYP_NM=A.TEND_TYP_NM AND
	C.CRD_TYP_DESC=A.CRD_TYP_DESC AND
	ISNULL(C.CRD_SUB_TYP_DESC,-1)=ISNULL(A.CRD_SUB_TYP_DESC,-1) AND
	ISNULL(C.RSP_MSG_TXT,-1) =ISNULL(A.RSP_MSG_TXT,-1) AND
	C.PIN_RCVD_TXT=A.PIN_RCVD_TXT AND
	ISNULL(C.ISUR_BNK_NM,-1)=ISNULL(A.ISUR_BNK_NM,-1) AND
	ISNULL(C.POS_REG_NBR_ID,-1)=ISNULL(A.POS_REG_NBR_ID,-1) AND
	ISNULL(C.OMNI_CHL_IND,1)=ISNULL(A.OMNI_CHL_IND,1) AND
	ISNULL(C.VOD_RVS_DESC,-1)=ISNULL(A.VOD_RVS_DESC,-1) AND
	C.STR_TYP_NM=A.STR_TYP_NM )

WHEN NOT MATCHED  THEN
INSERT (GEO_HST_SK,DT_SK,STR_ID,STR_BRND_NM,STR_TXN_DT,FSC_YR_ID,FSC_QTR_NM,FSC_QTR_SEQ_ID,FSC_PRD_NM,FSC_PRD_SEQ_ID,TXN_TYP_NM,WLT_TYP_DESC,TXN_STS_DESC,TEND_TYP_NM,CRD_TYP_DESC,CRD_SUB_TYP_DESC,
RSP_MSG_TXT,TXN_CNT,APPR_AMT,PIN_RCVD_TXT,ISUR_BNK_NM,POS_REG_NBR_ID,OMNI_CHL_IND,VOD_RVS_DESC,STR_TYP_NM,TXN_TY_CNT,TXN_LY_CNT,TXN_TY_AMT,TXN_LY_AMT,AUD_INS_SK,AUD_UPD_SK,UDT_TS,UDT_BY
)
VALUES (C.GEO_HST_SK,C. DT_SK,C.STR_ID,C.STR_BRND_NM,C.STR_TXN_DT,C.FSC_YR_ID,C.FSC_QTR_NM,C.FSC_QTR_SEQ_ID,C.FSC_PRD_NM,C.FSC_PRD_SEQ_ID,C.TXN_TYP_NM,C.WLT_TYP_DESC,C.TXN_STS_DESC,
C.TEND_TYP_NM,C.CRD_TYP_DESC,C.CRD_SUB_TYP_DESC,C.RSP_MSG_TXT,C.TXN_CNT,C.APPR_AMT,C.PIN_RCVD_TXT,C.ISUR_BNK_NM,C.POS_REG_NBR_ID,C.OMNI_CHL_IND,C.VOD_RVS_DESC,C.STR_TYP_NM,C.TXN_TY_CNT,
C.TXN_LY_CNT,C.TXN_TY_AMT,C.TXN_LY_AMT,C.Aud_Ins_Sk,C.Aud_Upd_Sk,C.UDT_TS,C.UDT_BY)

WHEN MATCHED THEN
UPDATE SET
A.APPR_AMT=A.APPR_AMT+C.APPR_AMT,
A.TXN_CNT=A.TXN_CNT+C.TXN_CNT,
A.TXN_TY_CNT=A.TXN_TY_CNT+C.TXN_TY_CNT,
A.TXN_LY_CNT=A.TXN_LY_CNT+C.TXN_LY_CNT,
A.TXN_TY_AMT=A.TXN_TY_AMT+C.TXN_TY_AMT,
A.TXN_LY_AMT=A.TXN_LY_AMT+C.TXN_LY_AMT,
A.UDT_TS=C.UDT_TS,
A.UDT_BY=C.UDT_BY,
A.Aud_Upd_Sk=C.AUD_INS_SK;

END

BEGIN
SELECT @NBR_OF_RW_ISRT = COUNT_BIG(1)  FROM EDAA_DW.FCT_DLY_PYMT_TNR WHERE Aud_Ins_Sk = @NEW_AUD_SKY
SELECT @NBR_OF_RW_UDT  = COUNT_BIG(1)  FROM EDAA_DW.FCT_DLY_PYMT_TNR WHERE Aud_Upd_Sk = @NEW_AUD_SKY
------------ UPDATE Statistics-------
UPDATE STATISTICS  EDAA_DW.FCT_HRLY_LST_YR_SLS;
END

/*Audit Log End*/
EXEC EDAA_CNTL.SP_AUDIT_DATA_LOAD_END @AUD_SKY = @NEW_AUD_SKY, @NBR_OF_RW_ISRT = @NBR_OF_RW_ISRT, @NBR_OF_RW_UDT  = @NBR_OF_RW_UDT

EXEC [ETL].[LOG_ERR] @EXEC_JOB=@EXEC_JOB,
					 @ERROR_PROCEDURE_NAME = @ERROR_PROCEDURE_NAME,
					 @ERROR_LINE = -1,
					 @ERROR_MSG = -1;

END TRY

BEGIN CATCH
--DECLARE @ERROR_PROCEDURE_NAME AS VARCHAR(250) = 'EDAA_ETL.SP_STG_DW_FCT_DLY_PAYMENT_TENDER_TABLELOAD'
--DECLARE @ERROR_LINE AS INT;
--DECLARE @ERROR_MSG AS NVARCHAR(max);
 SELECT @ERROR_LINE =  ERROR_NUMBER()
		,@ERROR_MSG = ERROR_MESSAGE();
--------- Log execution error ----------
EXEC EDAA_CNTL.SP_LOG_AUD_ERR @AUD_SKY = @NEW_AUD_SKY,
							  @ERROR_PROCEDURE_NAME = @ERROR_PROCEDURE_NAME,
							  @ERROR_LINE = @ERROR_LINE,
							  @ERROR_MSG = @ERROR_MSG;

EXEC [ETL].[LOG_ERR] @EXEC_JOB=@EXEC_JOB,
					 @ERROR_PROCEDURE_NAME = @ERROR_PROCEDURE_NAME,
					 @ERROR_LINE = @ERROR_LINE,
					 @ERROR_MSG = @ERROR_MSG;

-- Detect the change
   THROW;
END CATCH
