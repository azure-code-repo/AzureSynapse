CREATE PROC [EDAA_ETL].[PROC_FCT_DLY_STR_ITMSKU_SLS_ADJ_INITIAL_TABLELOAD] AS

--EXEC [EDAA_ETL].[PROC_FCT_DLY_STR_ITMSKU_SLS_ADJ_INITIAL_TABLELOAD]

BEGIN TRY

/*DATAMART AUDITING VARIABLES*/
DECLARE @NEW_AUD_SKY BIGINT
DECLARE @NBR_OF_RW_ISRT INT
DECLARE @NBR_OF_RW_UDT INT
DECLARE @EXEC_LYR VARCHAR(255)
DECLARE @EXEC_JOB VARCHAR(500)
DECLARE @SRC_ENTY VARCHAR(500)
DECLARE @TGT_ENTY VARCHAR(500)
/*AUDIT LOG START*/
EXEC EDAA_CNTL.SP_AUDIT_DATA_LOAD_START
 @EXEC_LYR  = 'EDAA_DW'
,@EXEC_JOB  = 'PROC_FCT_DLY_STR_ITMSKU_SLS_ADJ_INITIAL_TABLELOAD'
,@SRC_ENTY  = 'UT_UPC_DLY_SL_ADJ_HST_INITIAL'
,@TGT_ENTY = 'FCT_DLY_STR_ITMSKU_SLS_ADJ'
,@NEW_AUD_SKY = @NEW_AUD_SKY OUTPUT



DECLARE @NUMBEROFPARTITIONS INT, @NEXTPROCESSINGSTARTDATE DATE, @MAXPROCESSINGDATE DATE, @PROCESSINGENDDATE DATE
DECLARE @NBR_OF_RW_ISRT_TOTAL INT = 0,  @NBR_OF_RW_UDT_TOTAL INT =0

SELECT
@NUMBEROFPARTITIONS = DATEDIFF(M, MIN(BUS_DT),MAX(BUS_DT))+1,
@NEXTPROCESSINGSTARTDATE =  MIN(CAST(BUS_DT AS DATE)),
@MAXPROCESSINGDATE = MAX(CAST(BUS_DT AS DATE))
FROM  EDAA_STG.UT_UPC_DLY_SL_ADJ_HST_INITIAL



DECLARE @COUNTER INT = 1;

WHILE @COUNTER <= @NUMBEROFPARTITIONS
BEGIN
    PRINT @COUNTER;

PRINT('BEFORE PARTITION VARIABLES');

/*PARTITION SWITCHING OUT AND IN */
DECLARE @PARTITIONDATE INT, @PROCESSINGDAY DATE, @PARTITIONDATESTART DATE, @PARTITIONDATEEND AS DATE, @PARTITIONDATESTARTKEY AS INT, @PARTITIONDATEENDKEY AS INT


-- GET BOUNDARY VALUES FOR SOURCE QUERY
SET @PROCESSINGDAY = @NEXTPROCESSINGSTARTDATE
SET @PROCESSINGENDDATE = CASE WHEN @MAXPROCESSINGDATE < EOMONTH(@NEXTPROCESSINGSTARTDATE) THEN @MAXPROCESSINGDATE ELSE EOMONTH(@NEXTPROCESSINGSTARTDATE) END

-- GET BEGINNING OF PARTITION VALUE AND END OF PARTITION VALUE
SELECT @PARTITIONDATESTART = DATEADD(M,DATEDIFF(M,0,@PROCESSINGDAY),0)
SELECT @PARTITIONDATEEND = EOMONTH(DATEADD(M,DATEDIFF(M,0,@PROCESSINGDAY),0))
SELECT @PARTITIONDATESTARTKEY = CAST(CONVERT(VARCHAR,@PARTITIONDATESTART,112) AS INT)
SELECT @PARTITIONDATEENDKEY = CAST(CONVERT(VARCHAR,@PARTITIONDATEEND,112) AS INT)





--GET PARTITION NUMBER
SELECT @PARTITIONDATESTARTKEY
DECLARE @PNUMBER INT;
EXEC ETL.PROC_GET_PARTITION_NUMBER
@SCHEMA = 'EDAA_DW',
@TABLENAME='FCT_DLY_STR_ITMSKU_SLS_ADJ',
@PARTITIONVALUE = @PARTITIONDATESTARTKEY,
@PARTITIONNUMBER = @PNUMBER  OUTPUT ;
SELECT @PNUMBER


IF OBJECT_ID('EDAA_STG.FCT_DLY_STR_ITMSKU_SLS_ADJ_OUT') IS NOT NULL
BEGIN
    DROP TABLE EDAA_STG.FCT_DLY_STR_ITMSKU_SLS_ADJ_OUT
END


CREATE TABLE EDAA_STG.FCT_DLY_STR_ITMSKU_SLS_ADJ_OUT
WITH
(
	DISTRIBUTION = HASH ( DT_SK ),
	CLUSTERED COLUMNSTORE INDEX,
	PARTITION
		(DT_SK RANGE RIGHT FOR VALUES (20160101, 20160201, 20160301, 20160401, 20160501, 20160601, 20160701, 20160801, 20160901, 20161001, 20161101, 20161201, 20170101, 20170201, 20170301, 20170401, 20170501, 20170601, 20170701, 20170801, 20170901, 20171001, 20171101, 20171201, 20180101, 20180201, 20180301, 20180401, 20180501, 20180601, 20180701, 20180801, 20180901, 20181001, 20181101, 20181201, 20190101, 20190201, 20190301, 20190401, 20190501, 20190601, 20190701, 20190801, 20190901, 20191001, 20191101, 20191201, 20200101, 20200201, 20200301, 20200401, 20200501, 20200601, 20200701, 20200801, 20200901, 20201001, 20201101, 20201201, 20210101, 20210201, 20210301, 20210401, 20210501, 20210601, 20210701, 20210801, 20210901, 20211001, 20211101, 20211201, 20220101, 20220201, 20220301, 20220401, 20220501, 20220601, 20220701, 20220801, 20220901, 20221001, 20221101, 20221201, 20230101, 20230201, 20230301, 20230401, 20230501, 20230601, 20230701, 20230801, 20230901, 20231001, 20231101, 20231201, 20240101, 20240201, 20240301, 20240401, 20240501, 20240601, 20240701, 20240801, 20240901, 20241001, 20241101, 20241201, 20250101, 20250201, 20250301, 20250401, 20250501, 20250601, 20250701, 20250801, 20250901, 20251001, 20251101, 20251201, 20260101, 20260201, 20260301, 20260401, 20260501, 20260601, 20260701, 20260801, 20260901, 20261001, 20261101, 20261201, 20270101, 20270201, 20270301, 20270401, 20270501, 20270601, 20270701, 20270801, 20270901, 20271001, 20271101, 20271201, 20280101, 20280201, 20280301, 20280401, 20280501, 20280601, 20280701, 20280801, 20280901, 20281001, 20281101, 20281201, 20290101, 20290201, 20290301, 20290401, 20290501, 20290601, 20290701, 20290801, 20290901, 20291001, 20291101, 20291201, 20300101, 20300201, 20300301, 20300401, 20300501, 20300601, 20300701, 20300801, 20300901, 20301001, 20301101, 20301201, 20310101, 20310201, 20310301, 20310401, 20310501, 20310601, 20310701, 20310801, 20310901, 20311001, 20311101, 20311201, 20320101, 20320201, 20320301, 20320401, 20320501, 20320601, 20320701, 20320801, 20320901, 20321001, 20321101, 20321201, 20330101, 20330201, 20330301, 20330401, 20330501, 20330601, 20330701, 20330801, 20330901, 20331001, 20331101, 20331201, 20340101, 20340201, 20340301, 20340401, 20340501, 20340601, 20340701, 20340801, 20340901, 20341001, 20341101, 20341201, 20350101, 20350201, 20350301, 20350401, 20350501, 20350601, 20350701, 20350801, 20350901, 20351001, 20351101, 20351201, 20360101, 20360201, 20360301, 20360401, 20360501, 20360601, 20360701, 20360801, 20360901, 20361001, 20361101, 20361201, 20370101, 20370201, 20370301, 20370401, 20370501, 20370601, 20370701, 20370801, 20370901, 20371001, 20371101, 20371201, 20380101, 20380201, 20380301, 20380401, 20380501, 20380601, 20380701, 20380801, 20380901, 20381001, 20381101, 20381201, 20390101, 20390201, 20390301, 20390401, 20390501, 20390601, 20390701, 20390801, 20390901, 20391001, 20391101, 20391201, 20400101, 20400201, 20400301, 20400401, 20400501, 20400601, 20400701, 20400801, 20400901, 20401001, 20401101, 20401201)
	)

)
AS
SELECT *
FROM    EDAA_DW.FCT_DLY_STR_ITMSKU_SLS_ADJ
WHERE 1=2
OPTION (LABEL = 'CTAS : PARTITION SWITCH IN : UPDATE')
;

IF OBJECT_ID('EDAA_STG.PK_FCT_DLY_STR_ITMSKU_SLS_ADJ_OUT') IS NULL
BEGIN
DECLARE @SQL_ALTER1 NVARCHAR(4000) = '
ALTER TABLE EDAA_STG.FCT_DLY_STR_ITMSKU_SLS_ADJ_OUT  ADD CONSTRAINT PK_FCT_DLY_STR_ITMSKU_SLS_ADJ_OUT
PRIMARY KEY NONCLUSTERED
(
		PROD_HIST_SK ASC,
		GEO_HIST_SK ASC,
		DT_SK ASC
) NOT ENFORCED;'

EXEC SP_EXECUTESQL @SQL_ALTER1
END


IF OBJECT_ID('EDAA_STG.FCT_DLY_STR_ITMSKU_SLS_ADJ_IN') IS NOT NULL
BEGIN
    DROP TABLE EDAA_STG.FCT_DLY_STR_ITMSKU_SLS_ADJ_IN
END

CREATE TABLE EDAA_STG.FCT_DLY_STR_ITMSKU_SLS_ADJ_IN
WITH
(
	DISTRIBUTION = HASH ( DT_SK ),
	CLUSTERED COLUMNSTORE INDEX,
	PARTITION
		(DT_SK RANGE RIGHT FOR VALUES (20160101, 20160201, 20160301, 20160401, 20160501, 20160601, 20160701, 20160801, 20160901, 20161001, 20161101, 20161201, 20170101, 20170201, 20170301, 20170401, 20170501, 20170601, 20170701, 20170801, 20170901, 20171001, 20171101, 20171201, 20180101, 20180201, 20180301, 20180401, 20180501, 20180601, 20180701, 20180801, 20180901, 20181001, 20181101, 20181201, 20190101, 20190201, 20190301, 20190401, 20190501, 20190601, 20190701, 20190801, 20190901, 20191001, 20191101, 20191201, 20200101, 20200201, 20200301, 20200401, 20200501, 20200601, 20200701, 20200801, 20200901, 20201001, 20201101, 20201201, 20210101, 20210201, 20210301, 20210401, 20210501, 20210601, 20210701, 20210801, 20210901, 20211001, 20211101, 20211201, 20220101, 20220201, 20220301, 20220401, 20220501, 20220601, 20220701, 20220801, 20220901, 20221001, 20221101, 20221201, 20230101, 20230201, 20230301, 20230401, 20230501, 20230601, 20230701, 20230801, 20230901, 20231001, 20231101, 20231201, 20240101, 20240201, 20240301, 20240401, 20240501, 20240601, 20240701, 20240801, 20240901, 20241001, 20241101, 20241201, 20250101, 20250201, 20250301, 20250401, 20250501, 20250601, 20250701, 20250801, 20250901, 20251001, 20251101, 20251201, 20260101, 20260201, 20260301, 20260401, 20260501, 20260601, 20260701, 20260801, 20260901, 20261001, 20261101, 20261201, 20270101, 20270201, 20270301, 20270401, 20270501, 20270601, 20270701, 20270801, 20270901, 20271001, 20271101, 20271201, 20280101, 20280201, 20280301, 20280401, 20280501, 20280601, 20280701, 20280801, 20280901, 20281001, 20281101, 20281201, 20290101, 20290201, 20290301, 20290401, 20290501, 20290601, 20290701, 20290801, 20290901, 20291001, 20291101, 20291201, 20300101, 20300201, 20300301, 20300401, 20300501, 20300601, 20300701, 20300801, 20300901, 20301001, 20301101, 20301201, 20310101, 20310201, 20310301, 20310401, 20310501, 20310601, 20310701, 20310801, 20310901, 20311001, 20311101, 20311201, 20320101, 20320201, 20320301, 20320401, 20320501, 20320601, 20320701, 20320801, 20320901, 20321001, 20321101, 20321201, 20330101, 20330201, 20330301, 20330401, 20330501, 20330601, 20330701, 20330801, 20330901, 20331001, 20331101, 20331201, 20340101, 20340201, 20340301, 20340401, 20340501, 20340601, 20340701, 20340801, 20340901, 20341001, 20341101, 20341201, 20350101, 20350201, 20350301, 20350401, 20350501, 20350601, 20350701, 20350801, 20350901, 20351001, 20351101, 20351201, 20360101, 20360201, 20360301, 20360401, 20360501, 20360601, 20360701, 20360801, 20360901, 20361001, 20361101, 20361201, 20370101, 20370201, 20370301, 20370401, 20370501, 20370601, 20370701, 20370801, 20370901, 20371001, 20371101, 20371201, 20380101, 20380201, 20380301, 20380401, 20380501, 20380601, 20380701, 20380801, 20380901, 20381001, 20381101, 20381201, 20390101, 20390201, 20390301, 20390401, 20390501, 20390601, 20390701, 20390801, 20390901, 20391001, 20391101, 20391201, 20400101, 20400201, 20400301, 20400401, 20400501, 20400601, 20400701, 20400801, 20400901, 20401001, 20401101, 20401201)
	)

)
/*AS
SELECT *
FROM    EDAA_DW.FCT_DLY_STR_ITMSKU_SLS_ADJ
WHERE 1=2
OPTION (LABEL = 'CTAS : PARTITION SWITCH IN : UPDATE')
;*/
AS
SELECT *
FROM    EDAA_DW.FCT_DLY_STR_ITMSKU_SLS_ADJ
WHERE
DT_SK BETWEEN @PARTITIONDATESTARTKEY AND @PARTITIONDATEENDKEY
AND NOT EXISTS
(
SELECT 1
FROM
	(
		SELECT DISTINCT
		REPLACE(CAST(BUS_DT  AS DATE),'-','') AS BUS_DT
		FROM  EDAA_STG.UT_UPC_DLY_SL_ADJ_HST_INITIAL
		WHERE
		CAST(BUS_DT AS DATE)   BETWEEN @PROCESSINGDAY AND @PROCESSINGENDDATE
	) AS INCL
WHERE
DT_SK = BUS_DT
)
OPTION (LABEL = 'CTAS : PARTITION SWITCH IN : UPDATE')
;



IF OBJECT_ID('EDAA_STG.PK_FCT_DLY_STR_ITMSKU_SLS_ADJ_IN') IS NULL
BEGIN
DECLARE @SQL_ALTER NVARCHAR(4000) = '
ALTER TABLE EDAA_STG.FCT_DLY_STR_ITMSKU_SLS_ADJ_IN  ADD CONSTRAINT PK_FCT_DLY_STR_ITMSKU_SLS_ADJ_IN
PRIMARY KEY NONCLUSTERED
(
		PROD_HIST_SK ASC,
		GEO_HIST_SK ASC,
		DT_SK ASC
) NOT ENFORCED;'

EXEC SP_EXECUTESQL @SQL_ALTER
END




print('----starting DW load----')


;with initial_data as (
SELECT	ISNULL(PROD_HIST_SK,-1)					AS PROD_HIST_SK,
		ISNULL(GEO_HIST_SK, -1) 				AS GEO_HIST_SK,
		CAST(REPLACE(A.BUS_DT,'-','') AS INT)	AS DT_SK,
		A.RW_CRT_DT								AS CR_DT,
		A.UT_ID									AS STR_ID,
		UPC_ID									AS ITM_SKU,
		T_SL_ADJ_AM								AS SLS_ADJ_AMT,
		T_SL_ADJ_QT								AS SLS_ADJ_QTY,
		T_WGT_ADJ_QT							AS SLS_ADJ_WGT,
		T_PROMO_SL_ADJ_AM						AS PRM_TO_SLS_ADJ_AMT,
		T_PROMO_SL_ADJ_QT						AS PRM_TO_SLS_ADJ_QTY,
		T_PROMO_WGT_ADJ_QT						AS PRM_TO_SLS_ADJ_WGT,
		T_PROMO_MKDN_ADJ_AM						AS PRM_TO_SLS_MKDN_ADJ_AMT,
		T_CLRN_SL_ADJ_AM						AS CLRNC_SLS_ADJ_AMT,
		T_CLRN_SL_ADJ_QT						AS CLRNC_ADJ_QTY,
		T_CLRN_WGT_ADJ_QT						AS CLRNC_ADJ_WGT,
		T_CLRN_MKDN_ADJ_AM						AS CLRNC_MKDN_ADJ_AMT,
		T_CGS_P_CST_ADJ_AM						AS COGS_ADJ_AMT,
		T_CGS_FNC_CHRG_ADJ_AM					AS COGS_FNC_CHRG_ADJ_AMT,
		T_CGS_FNC_CR_ADJ_AM						AS COGS_FNC_CR_ADJ_AMT,
		T_CGS_STG_CHRG_ADJ_AM					AS COGS_STRGE_CHRG_ADJ_AMT,
		T_CGS_FRT_ADJ_AM						AS COGS_FRT_ADJ_AMT,
		T_CGS_DF_HDL_ADJ_AM						AS COGS_DIST_CNTR_HNDL_ADJ_AMT,
		T_DMGN_ADJ_AM							AS DRCT_MGN_ADJ_AMT,
		T_PROMO_DMGN_ADJ_AM						AS PRM_TO_SLS_DRCT_MGN_ADJ_AMT,
		T_CLRN_DMGN_ADJ_AM						AS CLRNC_DRCT_MGN_ADJ_AMT,
		@NEW_AUD_SKY							AS AUD_INS_SK,
		NULL									AS AUD_UPD_SK

FROM EDAA_STG.UT_UPC_DLY_SL_ADJ_HST_INITIAL AS A

LEFT OUTER JOIN (SELECT GEO_HIST_SK,
						STR_ID,
						VLD_FRM,
						VLD_TO
			FROM 		EDAA_DW.DIM_GEO
			--WHERE 	IS_CURR<>0

					) AS GEO
	ON GEO.STR_ID = A.UT_ID
	AND  cast(A.BUS_DT as date) BETWEEN GEO.VLD_FRM AND ISNULL(GEO.VLD_TO, CAST('2099-01-01' AS DATE))

LEFT OUTER JOIN (SELECT PROD_HIST_SK,
						ITM_SKU,
						PROD_SK,
						VLD_FRM,
						VLD_TO
		FROM 		EDAA_DW.DIM_PROD
			--WHERE 	IS_CURR<>0

					) AS P
	ON  P.ITM_SKU = A.UPC_ID
	AND  cast(A.BUS_DT as date) BETWEEN P.VLD_FRM AND ISNULL(P.VLD_TO, CAST('2099-01-01' AS DATE))

)

INSERT INTO EDAA_STG.FCT_DLY_STR_ITMSKU_SLS_ADJ_IN
SELECT	PROD_HIST_SK,
		GEO_HIST_SK,
		DT_SK,
		CR_DT,
		STR_ID,
		ITM_SKU,
		SLS_ADJ_AMT,
		SLS_ADJ_QTY,
		SLS_ADJ_WGT,
		PRM_TO_SLS_ADJ_AMT,
		PRM_TO_SLS_ADJ_QTY,
		PRM_TO_SLS_ADJ_WGT,
		PRM_TO_SLS_MKDN_ADJ_AMT,
		CLRNC_SLS_ADJ_AMT,
		CLRNC_ADJ_QTY,
		CLRNC_ADJ_WGT,
		CLRNC_MKDN_ADJ_AMT,
		COGS_ADJ_AMT,
		COGS_FNC_CHRG_ADJ_AMT,
		COGS_FNC_CR_ADJ_AMT,
		COGS_STRGE_CHRG_ADJ_AMT,
		COGS_FRT_ADJ_AMT,
		COGS_DIST_CNTR_HNDL_ADJ_AMT,
		DRCT_MGN_ADJ_AMT,
		PRM_TO_SLS_DRCT_MGN_ADJ_AMT,
		CLRNC_DRCT_MGN_ADJ_AMT,
		AUD_INS_SK,
		AUD_UPD_SK
from initial_data WHERE
		SLS_ADJ_AMT<>0 OR
		SLS_ADJ_QTY<>0 OR
		SLS_ADJ_WGT<>0 OR
		PRM_TO_SLS_ADJ_AMT<>0 OR
		PRM_TO_SLS_ADJ_QTY<>0 OR
		PRM_TO_SLS_ADJ_WGT<>0 OR
		PRM_TO_SLS_MKDN_ADJ_AMT<>0 OR
		CLRNC_SLS_ADJ_AMT<>0 OR
		CLRNC_ADJ_QTY<>0 OR
		CLRNC_ADJ_WGT<>0 OR
		CLRNC_MKDN_ADJ_AMT<>0 OR
		COGS_ADJ_AMT<>0 OR
		COGS_FNC_CHRG_ADJ_AMT<>0 OR
		COGS_FNC_CR_ADJ_AMT<>0 OR
		COGS_STRGE_CHRG_ADJ_AMT<>0 OR
		COGS_FRT_ADJ_AMT<>0 OR
		COGS_DIST_CNTR_HNDL_ADJ_AMT<>0 OR
		DRCT_MGN_ADJ_AMT<>0 OR
		PRM_TO_SLS_DRCT_MGN_ADJ_AMT<>0 OR
		CLRNC_DRCT_MGN_ADJ_AMT<>0; --where  GEO_HIST_SK<>-1 and PROD_HIST_SK<>-1

print('---DW load complete---');



BEGIN

--SELECT @NBR_OF_RW_ISRT = COUNT(1)  FROM EDAA_STG.FCT_DLY_STR_ITMSKU_SLS_ADJ_IN WHERE AUD_INS_SK = @NEW_AUD_SKY
--SELECT @NBR_OF_RW_UDT  = COUNT(1)  FROM EDAA_STG.FCT_DLY_STR_ITMSKU_SLS_ADJ_IN WHERE AUD_UPD_SK = @NEW_AUD_SKY

SET @NBR_OF_RW_UDT_TOTAL = @NBR_OF_RW_UDT_TOTAL + 1
SET @NBR_OF_RW_ISRT_TOTAL = @NBR_OF_RW_ISRT_TOTAL + 2

--SWITCH THE PARTITIONS OVER
--SWITCH THE PARTITIONS OVER
DECLARE @SQL NVARCHAR(4000) = '
ALTER TABLE EDAA_DW.FCT_DLY_STR_ITMSKU_SLS_ADJ    SWITCH PARTITION '+CAST(@PNUMBER AS VARCHAR(20))    +' TO EDAA_STG.FCT_DLY_STR_ITMSKU_SLS_ADJ_OUT PARTITION '    +CAST(@PNUMBER AS VARCHAR(20))+';
ALTER TABLE EDAA_STG.FCT_DLY_STR_ITMSKU_SLS_ADJ_IN SWITCH PARTITION '+CAST(@PNUMBER AS VARCHAR(20))    +' TO EDAA_DW.FCT_DLY_STR_ITMSKU_SLS_ADJ PARTITION '        +CAST(@PNUMBER AS VARCHAR(20))+';'
EXEC SP_EXECUTESQL @SQL

--PERFORM THE CLEAN-UP

TRUNCATE TABLE EDAA_STG.FCT_DLY_STR_ITMSKU_SLS_ADJ_OUT;
TRUNCATE TABLE EDAA_STG.FCT_DLY_STR_ITMSKU_SLS_ADJ_IN;


END


SET @COUNTER = @COUNTER + 1;
SET @NEXTPROCESSINGSTARTDATE = DATEADD(D,1,@PROCESSINGENDDATE)

END

DROP TABLE EDAA_STG.FCT_DLY_STR_ITMSKU_SLS_ADJ_OUT;
DROP TABLE EDAA_STG.FCT_DLY_STR_ITMSKU_SLS_ADJ_IN;

/*AUDIT LOG END*/
EXEC EDAA_CNTL.SP_AUDIT_DATA_LOAD_END @AUD_SKY = @NEW_AUD_SKY, @NBR_OF_RW_ISRT = @NBR_OF_RW_ISRT_TOTAL, @NBR_OF_RW_UDT  = @NBR_OF_RW_UDT_TOTAL



END TRY

BEGIN CATCH
DECLARE @ERROR_PROCEDURE_NAME AS VARCHAR(60) = '[EDAA_ETL].[PROC_FCT_DLY_STR_ITMSKU_SLS_ADJ_INITIAL_TABLELOAD]'
DECLARE @ERROR_LINE AS INT;
DECLARE @ERROR_MSG AS NVARCHAR(max);

 SELECT
      @ERROR_LINE =  ERROR_NUMBER()
       ,@ERROR_MSG = ERROR_MESSAGE();
--------- Log execution error ----------



EXEC EDAA_CNTL.SP_LOG_AUD_ERR
@AUD_SKY = @NEW_AUD_SKY,
@ERROR_PROCEDURE_NAME = @ERROR_PROCEDURE_NAME,
@ERROR_LINE = @ERROR_LINE,
@ERROR_MSG = @ERROR_MSG;

-- Detect the change


   THROW;




END CATCH
