CREATE PROC [EDAA_ETL].[PROC_DIM_INV_ADJ_TABLELOAD] AS


BEGIN TRY
/*Datamart Auditing variables*/
DECLARE @NEW_AUD_SKY BIGINT
DECLARE @NBR_OF_RW_ISRT INT
DECLARE @NBR_OF_RW_UDT INT
DECLARE @EXEC_LYR VARCHAR(255)
DECLARE @EXEC_JOB VARCHAR(500)
DECLARE @SRC_ENTY VARCHAR(500)
DECLARE @TGT_ENTY VARCHAR(500)

/*Audit Log Start*/
EXEC EDAA_CNTL.SP_AUDIT_DATA_LOAD_START
 @EXEC_LYR  = 'DM'
,@EXEC_JOB  = 'PROC_DIM_INV_ADJ_TABLELOAD'
,@SRC_ENTY  = 'DIM_INV_ADJ_TMP'
,@TGT_ENTY = 'DIM_INV_ADJ'
,@NEW_AUD_SKY = @NEW_AUD_SKY OUTPUT

DECLARE @NEXT_INV_ADJ_SK INT
SELECT @NEXT_INV_ADJ_SK =ISNULL(MAX(INV_ADJ_SK),0)   FROM EDAA_DW.DIM_INV_ADJ

--select * FROM  EDAA_STG.DIM_INV_ADJ_TMP order by 1

;WITH CTE_embr AS
(
SELECT stg.ADJ_TYP, stg.TN_TYP, stg.INV_ADJ_DSC, adj.INV_TN_TYP_CT_ID, adj.INV_TN_TYP_CT_DSC
FROM  EDAA_STG.DIM_INV_ADJ_TMP stg  inner join EDAA_STG.DIM_INV_ADJ_TYP_CT_TMP adj on stg.ADJ_TYP=adj.INV_TN_TYP_CT_NM
LEFT JOIN 	EDAA_DW.DIM_INV_ADJ  dim
ON stg.TN_TYP= dim.TXN_TYP AND stg.ADJ_TYP= dim.ADJ_TYP
)

UPDATE EDAA_DW.DIM_INV_ADJ
SET			--TXN_TYP_SK=	@NEXT_TXN_TYP_SK ,
			--ADJ_TYP 	=   CTE_embr.ADJ_TYP ,
			--TXN_TYP	=	CTE_embr.TN_TYP,
			ADJ_TYP_ID =	CTE_embr.INV_TN_TYP_CT_ID,
			ADJ_TYP_DESC =	CTE_embr.INV_TN_TYP_CT_DSC,
			INV_ADJ_DESC=	CTE_embr.INV_ADJ_DSC,
			ETL_ACTN= case when ETL_ACTN='New embryo' then 'Update embryo' else 'Update' end,
			--Is_Dmy_Ind	=	cast(0 AS BIT),
			AUD_UPD_SK	=	@NEW_AUD_SKY

FROM 	CTE_embr,	EDAA_DW.DIM_INV_ADJ DIM1
WHERE  CTE_embr.TN_TYP= DIM1.TXN_TYP and CTE_embr.ADJ_TYP= DIM1.ADJ_TYP  and
       (DIM1.INV_ADJ_DESC <>  CTE_embr.INV_ADJ_DSC or
	   DIM1.ADJ_TYP_DESC <>  CTE_embr.INV_TN_TYP_CT_DSC)
;



;WITH CTE_embr AS
(
SELECT stg.ADJ_TYP, stg.TN_TYP, stg.INV_ADJ_DSC, adj.INV_TN_TYP_CT_ID, adj.INV_TN_TYP_CT_DSC
FROM  EDAA_STG.DIM_INV_ADJ_TMP stg  inner join EDAA_STG.DIM_INV_ADJ_TYP_CT_TMP adj on stg.ADJ_TYP=adj.INV_TN_TYP_CT_NM
LEFT JOIN 	EDAA_DW.DIM_INV_ADJ  dim
ON stg.TN_TYP= dim.TXN_TYP AND stg.ADJ_TYP= dim.ADJ_TYP
)
INSERT INTO EDAA_DW.DIM_INV_ADJ

SELECT		@NEXT_INV_ADJ_SK+row_number() over (order by ADJ_TYP, TN_TYP) AS INV_ADJ_SK,
			INV_TN_TYP_CT_ID	AS ADJ_TYP_ID ,
			ADJ_TYP				AS ADJ_TYP,
			INV_TN_TYP_CT_DSC	AS ADJ_TYP_DESC,
			TN_TYP				AS TXN_TYP,
			INV_ADJ_DSC			AS INV_ADJ_DESC,
			0 					AS IS_DMY,
			0 					AS IS_EMBR,
			'Insert'			AS ETL_ACTN,
			@NEW_AUD_SKY		AS AUD_INS_SK,
			NULL 				AS AUD_UPD_SK

FROM CTE_embr X  --EDAA_STG.DIM_INV_ADJ_TMP X
WHERE CONCAT(ADJ_TYP,'-',TN_TYP) NOT IN (SELECT CONCAT(ADJ_TYP,'-',TXN_TYP) FROM   EDAA_DW.DIM_INV_ADJ)
;


BEGIN
SELECT @NBR_OF_RW_ISRT = COUNT(1)  FROM EDAA_DW.DIM_INV_ADJ WHERE AUD_INS_SK = @NEW_AUD_SKY
SELECT @NBR_OF_RW_UDT  = COUNT(1)  FROM EDAA_DW.DIM_INV_ADJ WHERE AUD_UPD_SK = @NEW_AUD_SKY

END

/*Audit Log End*/
EXEC ETL.AUDIT_DATA_LOAD_END @AUD_SKY = @NEW_AUD_SKY, @NBR_OF_RW_ISRT = @NBR_OF_RW_ISRT, @NBR_OF_RW_UDT  = @NBR_OF_RW_UDT

END TRY

BEGIN CATCH
DECLARE @ERROR_PROCEDURE_NAME AS VARCHAR(60) = '[ETL].[PROC_DIM_INV_ADJ_TABLELOAD]'
DECLARE @ERROR_LINE AS INT;
DECLARE @ERROR_MSG AS NVARCHAR(max);

 SELECT
      @ERROR_LINE =  ERROR_NUMBER()
       ,@ERROR_MSG = ERROR_MESSAGE();
--------- Log execution error ----------



EXEC EDAA_CNTL.SP_LOG_AUD_ERR
@AUD_SKY = @NEW_AUD_SKY,
@ERROR_PROCEDURE_NAME = @ERROR_PROCEDURE_NAME,
@ERROR_LINE = @ERROR_LINE,
@ERROR_MSG = @ERROR_MSG;

-- Detect the change

   THROW;




END CATCH
