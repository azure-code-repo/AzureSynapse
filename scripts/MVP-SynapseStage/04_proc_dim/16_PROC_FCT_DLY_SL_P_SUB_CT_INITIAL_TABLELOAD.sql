
CREATE PROC [ETL].[PROC_FCT_DLY_SL_P_SUB_CT_INITIAL_TABLELOAD] AS

BEGIN TRY


/*DATAMART AUDITING VARIABLES*/
DECLARE @NEW_AUD_SKY BIGINT
DECLARE @NBR_OF_RW_ISRT INT
DECLARE @NBR_OF_RW_UDT INT
DECLARE @EXEC_LYR VARCHAR(255)
DECLARE @EXEC_JOB VARCHAR(500)
DECLARE @SRC_ENTY VARCHAR(500)
DECLARE @TGT_ENTY VARCHAR(500)

/*AUDIT LOG START*/
EXEC ETL.AUDIT_DATA_LOAD_START
 @EXEC_LYR  = 'DM'
,@EXEC_JOB  = 'PROC_FCT_DLY_SL_P_SUB_CT_INITIAL_TABLELOAD'
,@SRC_ENTY  = 'DLY_UT_MPRS_CT_HST INITIAL LOAD'
,@TGT_ENTY = 'FCT_DLY_SL_P_SUB_CT'
,@NEW_AUD_SKY = @NEW_AUD_SKY OUTPUT




DECLARE @NUMBEROFPARTITIONS INT, @NEXTPROCESSINGSTARTDATE DATE, @MAXPROCESSINGDATE DATE, @PROCESSINGENDDATE DATE
DECLARE @NBR_OF_RW_ISRT_TOTAL INT = 0,  @NBR_OF_RW_UDT_TOTAL INT =0

SELECT
@NUMBEROFPARTITIONS = DATEDIFF(M, MIN(DAY_DT),MAX(DAY_DT))+1,
@NEXTPROCESSINGSTARTDATE =  MIN(CAST(DAY_DT AS DATE)),
@MAXPROCESSINGDATE = MAX(CAST(DAY_DT AS DATE))
FROM  STG_EDW.DLY_UT_MPRS_CT_HST



IF OBJECT_ID('DM_EDW.FCT_DLY_SL_P_SUB_CT_OUT') IS NOT NULL
BEGIN
    DROP TABLE DM_EDW.FCT_DLY_SL_P_SUB_CT_OUT
END


CREATE TABLE DM_EDW.FCT_DLY_SL_P_SUB_CT_OUT
WITH
(
	DISTRIBUTION = HASH ( UT_ID ),
	CLUSTERED COLUMNSTORE INDEX,
	PARTITION
		
	)

)
AS
SELECT *
FROM    DM.FCT_DLY_SL_P_SUB_CT
WHERE 1=2
OPTION (LABEL = 'CTAS : PARTITION SWITCH IN : UPDATE')
;


IF OBJECT_ID('DM_EDW.FCT_DLY_SL_P_SUB_CT_IN') IS NOT NULL
BEGIN
    DROP TABLE DM_EDW.FCT_DLY_SL_P_SUB_CT_IN
END

CREATE TABLE DM_EDW.FCT_DLY_SL_P_SUB_CT_IN
WITH
(
	DISTRIBUTION = HASH ( UT_ID ),
	CLUSTERED COLUMNSTORE INDEX,
	PARTITION
		
	)

)
AS
SELECT *
FROM    DM.FCT_DLY_SL_P_SUB_CT
WHERE   1=0
/*
TM_SKY BETWEEN @PARTITIONDATESTARTKEY AND @PARTITIONDATEENDKEY
AND NOT EXISTS
(
SELECT 1
FROM
	(
		SELECT DISTINCT
		REPLACE(CAST(DAY_DT  AS DATE),'-','') AS DAY_DT
		FROM  STG_EDW.DLY_UT_MPRS_CT_HST
		WHERE
		CAST(DAY_DT AS DATE)   BETWEEN @PROCESSINGDAY AND @PROCESSINGENDDATE
	) AS INCL
WHERE
TM_SKY = DAY_DT
)*/
OPTION (LABEL = 'CTAS : PARTITION SWITCH IN : UPDATE')
;


IF OBJECT_ID('DM_EDW.PK_FCT_DLY_SL_P_SUB_CT_IN') IS NULL
BEGIN
DECLARE @SQL_ALTER NVARCHAR(4000) = '
ALTER TABLE DM_EDW.FCT_DLY_SL_P_SUB_CT_IN  ADD CONSTRAINT PK_FCT_DLY_SL_P_SUB_CT_IN
PRIMARY KEY NONCLUSTERED
(
		[GEO_HST_SKY] ASC,
		[TM_SKY] ASC,
		[P_SUB_CT_ID] ASC,
		[FNC_MPRS_CT_ID] ASC,
		[FNC_PKY_ID] ASC
) NOT ENFORCED;'

EXEC SP_EXECUTESQL @SQL_ALTER
END





DECLARE @COUNTER INT = 1;

WHILE @COUNTER <= @NUMBEROFPARTITIONS
BEGIN
    PRINT @COUNTER;



/*PARTITION SWITCHING OUT AND IN */
DECLARE @PARTITIONDATE INT, @PROCESSINGDAY DATE, @PARTITIONDATESTART DATE, @PARTITIONDATEEND AS DATE, @PARTITIONDATESTARTKEY AS INT, @PARTITIONDATEENDKEY AS INT


-- GET BOUNDARY VALUES FOR SOURCE QUERY
SET @PROCESSINGDAY = @NEXTPROCESSINGSTARTDATE
SET @PROCESSINGENDDATE = CASE WHEN @MAXPROCESSINGDATE < EOMONTH(@NEXTPROCESSINGSTARTDATE) THEN @MAXPROCESSINGDATE ELSE EOMONTH(@NEXTPROCESSINGSTARTDATE) END

-- GET BEGINNING OF PARTITION VALUE AND END OF PARTITION VALUE
SELECT @PARTITIONDATESTART = DATEADD(M,DATEDIFF(M,0,@PROCESSINGDAY),0)
SELECT @PARTITIONDATEEND = EOMONTH(DATEADD(M,DATEDIFF(M,0,@PROCESSINGDAY),0))
SELECT @PARTITIONDATESTARTKEY = CAST(CONVERT(VARCHAR,@PARTITIONDATESTART,112) AS INT)
SELECT @PARTITIONDATEENDKEY = CAST(CONVERT(VARCHAR,@PARTITIONDATEEND,112) AS INT)





--GET PARTITION NUMBER
SELECT @PARTITIONDATESTARTKEY
DECLARE @PNUMBER INT;
EXEC ETL.PROC_GET_PARTITION_NUMBER
@SCHEMA = 'DM',
@TABLENAME='FCT_DLY_SL_P_SUB_CT',
@PARTITIONVALUE = @PARTITIONDATESTARTKEY,
@PARTITIONNUMBER = @PNUMBER  OUTPUT ;
SELECT @PNUMBER





INSERT INTO DM_EDW.FCT_DLY_SL_P_SUB_CT_IN

SELECT DISTINCT
                 ISNULL(GEO_HST_SKY, -1) 				AS GEO_HST_SKY,
				 REPLACE(AA.DAY_DT ,'-','')				AS TM_SKY,
				 ISNULL(BYR_HST_SKY, -1) 				AS BYR_HST_SKY,
                 B.MJR_P_SUB_CT_ID 						AS P_SUB_CT_ID,
				 B.MPRS_CT_ID							AS FNC_MPRS_CT_ID,
                 B.PKY_ID							AS FNC_PKY_ID,
                 AA.UT_ID								AS UT_ID,
				 SUM(AA.TG_DMGN_AM)                  	AS DM_FNC_AM ,
				 SUM(AA.TG_CLRN_DMGN_AM)             	AS DM_FNC_CLRN_AM ,
				 SUM(AA.TG_PTS_DMGN_AM)              	AS DM_FNC_PROMO_AM ,
                 SUM(AA.TG_SL_AM)                    	AS SLS_FNC_AM,
                 SUM(AA.TG_SL_QT)                    	AS SLS_FNC_QTY ,
                 SUM(AA.TG_PTS_AM)                   	AS SLS_FNC_PROMO_AM ,
                 SUM(AA.TG_PTS_MKDN_AM)              	AS SLS_FNC_PROMO_MKDN_AM ,
				 SUM(AA.TG_CLRN_QT)                  	AS SLS_FNC_CLRN_QTY ,
				 SUM(AA.TG_CLRN_AM)                  	AS SLS_FNC_CLRN_AM ,
                 SUM(AA.TG_CLRN_MKDN_AM)             	AS SLS_FNC_CLRN_MKDN_AM ,
				 SUM(AA.TG_SCN_QT)                   	AS SLS_FNC_SCN_QTY ,
                 SUM(CASE WHEN ST_CLS = 'COMP STORE' THEN
								TG_SL_AM ELSE 0 END) 	AS SLS_FNC_AM_COMP,
				 SUM(CASE WHEN ST_CLS = 'NON-COMP STORE' THEN
								TG_SL_AM ELSE 0 END) 	AS SLS_FNC_AM_NCOMP,
				 SUM(TG_SHRK_AM )         AS INV_SHRK_AM,
				 SUM(TG_CLRN_INV_QT) AS INV_CLRN_QTY ,
				 @NEW_AUD_SKY	AS AUD_INS_SKY,
				 NULL			AS AUD_UPD_SKY


FROM       STG_EDW.DLY_UT_MPRS_CT_HST AS AA
--INNER JOIN WITH BYR_EMP_PKY_MPRS_CURRPREV_INF
INNER JOIN (
        SELECT 	PKY_ID,
				MPRS_CT_ID,
				MJR_P_SUB_CT_ID
        FROM  DM_EDW.BYR_EMP_PKY_MPRS_CURRPREV_INF
		WHERE CAST(INS_DT AS DATE) = (SELECT CAST(MAX(INS_DT) AS DATE) AS INS_DT
												FROM DM_EDW.BYR_EMP_PKY_MPRS_CURRPREV_INF)

			 ) AS B
ON         	B.PKY_ID=AA.PKY_ID
AND        	B.MPRS_CT_ID=AA.MPRS_CT_ID


--LEFT JOIN FOR SHRK_AMT


LEFT JOIN	(

	    SELECT  B.MJR_P_SUB_CT_ID ,
                AA.UT_ID ,
                AA.DAY_DT ,
                SUM(AA.TG_INV_T_INV_ADJ_AM)         AS TG_SHRK_AM
        FROM       STG_EDW.DLY_UT_MPRS_CT_INV_ADJ_HST AS AA
        INNER JOIN (
		SELECT 	PKY_ID,
				MPRS_CT_ID,
				MJR_P_SUB_CT_ID
        FROM  DM_EDW.BYR_EMP_PKY_MPRS_CURRPREV_INF
		WHERE CAST(INS_DT AS DATE) = (SELECT CAST(MAX(INS_DT) AS DATE) AS INS_DT
												FROM DM_EDW.BYR_EMP_PKY_MPRS_CURRPREV_INF)
					  ) AS B
        ON         B.PKY_ID=AA.PKY_ID
        AND        B.MPRS_CT_ID=AA.MPRS_CT_ID
        WHERE      AA.TN_TYP IN (50,701,702,331,340,341,348,633,900,904,905,906)
			 GROUP BY   B.MJR_P_SUB_CT_ID ,	AA.UT_ID ,	AA.DAY_DT
			) AS SHRK
ON SHRK.MJR_P_SUB_CT_ID = B.MJR_P_SUB_CT_ID
AND 		SHRK.UT_ID 	= AA.UT_ID
AND 		SHRK.DAY_DT = AA.DAY_DT

--LEFT JOIN FOR INVT_QTY

LEFT JOIN 	(
		SELECT 	UT_ID ,
				DAY_DT ,
				P_SUB_CT_ID,
				SUM(TG_INV_QT) AS TG_CLRN_INV_QT
		FROM 	STG_EDW.DLY_UT_P_UPC_HST HST
		INNER JOIN DM.DIM_P DIM
		ON 		HST.P_UPC_ID=DIM.UPC_ID
		WHERE 	HST.DAY_DT BETWEEN @PROCESSINGDAY AND @PROCESSINGENDDATE
		AND 	TG_INV_QT<>0
			GROUP BY UT_ID,DAY_DT,P_SUB_CT_ID
			)AS INV
ON 		INV.P_SUB_CT_ID = B.MJR_P_SUB_CT_ID
AND   		INV.UT_ID 	= AA.UT_ID
AND  		INV.DAY_DT 	= AA.DAY_DT

--LEFT JOIN WITH DIM_GEO

LEFT JOIN 	(
		SELECT 	GEO_HST_SKY,
				UT_ID,
				ST_CLS
		FROM 	DM.DIM_GEO
		WHERE 	IS_CURR <> 0
			) AS DIMGEO
ON DIMGEO.UT_ID =	AA.UT_ID

--LEFT JOIN WITH DIM_BYR_P_SUB_CT

LEFT JOIN 	(
		SELECT 	BYR_HST_SKY,
				P_SUB_CT_ID
		FROM 	DM.DIM_BYR_P_SUB_CT
		WHERE 	IS_CURR <> 0
			) AS BYR
ON BYR.P_SUB_CT_ID  = B.MJR_P_SUB_CT_ID

WHERE AA.DAY_DT  BETWEEN @PROCESSINGDAY AND @PROCESSINGENDDATE

GROUP BY   	B.MJR_P_SUB_CT_ID ,		AA.UT_ID ,
			AA.DAY_DT,	GEO_HST_SKY,	BYR_HST_SKY,
			B.PKY_ID,	B.MPRS_CT_ID,	AA.UT_ID

BEGIN

SELECT @NBR_OF_RW_ISRT = COUNT(1)  FROM DM_EDW.FCT_DLY_SL_P_SUB_CT_IN WHERE AUD_INS_SKY = @NEW_AUD_SKY
SELECT @NBR_OF_RW_UDT  = COUNT(1)  FROM DM_EDW.FCT_DLY_SL_P_SUB_CT_IN WHERE AUD_UPD_SKY = @NEW_AUD_SKY

SET @NBR_OF_RW_UDT_TOTAL = @NBR_OF_RW_UDT_TOTAL + @NBR_OF_RW_UDT
SET @NBR_OF_RW_ISRT_TOTAL = @NBR_OF_RW_ISRT_TOTAL + @NBR_OF_RW_ISRT


--SWITCH THE PARTITIONS OVER
DECLARE @SQL NVARCHAR(4000) = '
ALTER TABLE DM.FCT_DLY_SL_P_SUB_CT    SWITCH PARTITION '+CAST(@PNUMBER AS VARCHAR(20))    +' TO DM_EDW.FCT_DLY_SL_P_SUB_CT_OUT PARTITION '    +CAST(@PNUMBER AS VARCHAR(20))+';
ALTER TABLE DM_EDW.FCT_DLY_SL_P_SUB_CT_IN SWITCH PARTITION '+CAST(@PNUMBER AS VARCHAR(20))    +' TO DM.FCT_DLY_SL_P_SUB_CT PARTITION '        +CAST(@PNUMBER AS VARCHAR(20))+';'
EXEC SP_EXECUTESQL @SQL

--PERFORM THE CLEAN-UP
TRUNCATE TABLE DM_EDW.FCT_DLY_SL_P_SUB_CT_OUT;
TRUNCATE TABLE DM_EDW.FCT_DLY_SL_P_SUB_CT_IN;



END


SET @COUNTER = @COUNTER + 1;
SET @NEXTPROCESSINGSTARTDATE = DATEADD(D,1,@PROCESSINGENDDATE)

END

DROP TABLE DM_EDW.FCT_DLY_SL_P_SUB_CT_OUT
DROP TABLE DM_EDW.FCT_DLY_SL_P_SUB_CT_IN

/*AUDIT LOG END*/
EXEC ETL.AUDIT_DATA_LOAD_END @AUD_SKY = @NEW_AUD_SKY, @NBR_OF_RW_ISRT = @NBR_OF_RW_ISRT_TOTAL, @NBR_OF_RW_UDT  = @NBR_OF_RW_UDT_TOTAL

END TRY

BEGIN CATCH
DECLARE @ERROR_PROCEDURE_NAME AS VARCHAR(60) = '[ETL].[PROC_FCT_DLY_SL_P_SUB_CT_INITIAL_TABLELOAD]'
DECLARE @ERROR_LINE AS INT;
DECLARE @ERROR_MSG AS NVARCHAR(max);

 SELECT
      @ERROR_LINE =  ERROR_NUMBER()
       ,@ERROR_MSG = ERROR_MESSAGE();
--------- Log execution error ----------



EXEC [ETL].[LOG_AUD_ERR]
@AUD_SKY = @NEW_AUD_SKY,
@ERROR_PROCEDURE_NAME = @ERROR_PROCEDURE_NAME,
@ERROR_LINE = @ERROR_LINE,
@ERROR_MSG = @ERROR_MSG;


   THROW;




END CATCH
GO
