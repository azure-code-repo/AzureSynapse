
CREATE PROC [ETL].[PROC_FCT_DLY_SL_MB_TXN_P_SUB_CT_INITIAL_TABLELOAD] AS

BEGIN TRY

/*DATAMART AUDITING VARIABLES*/
DECLARE @NEW_AUD_SKY BIGINT
DECLARE @NBR_OF_RW_ISRT INT
DECLARE @NBR_OF_RW_UDT INT
DECLARE @EXEC_LYR VARCHAR(255)
DECLARE @EXEC_JOB VARCHAR(500)
DECLARE @SRC_ENTY VARCHAR(500)
DECLARE @TGT_ENTY VARCHAR(500)

/*AUDIT LOG START*/
EXEC ETL.AUDIT_DATA_LOAD_START
 @EXEC_LYR  = 'DM'
,@EXEC_JOB  = 'PROC_FCT_DLY_SL_MB_TXN_P_SUB_CT_INITIAL_TABLELOAD'
,@SRC_ENTY  = 'DLY_P_MDS_HCY_LVL_TN_HST INITIAL'
,@TGT_ENTY = 'FCT_DLY_SL_MB_TXN_P_SUB_CT'
,@NEW_AUD_SKY = @NEW_AUD_SKY OUTPUT

DECLARE @NUMBEROFPARTITIONS INT, @NEXTPROCESSINGSTARTDATE DATE, @MAXPROCESSINGDATE DATE, @PROCESSINGENDDATE DATE
DECLARE @NBR_OF_RW_ISRT_TOTAL INT = 0,  @NBR_OF_RW_UDT_TOTAL INT =0

SELECT
@NUMBEROFPARTITIONS = DATEDIFF(M, MIN(DAY_DT),MAX(DAY_DT))+1,
@NEXTPROCESSINGSTARTDATE = MIN(DAY_DT),
@MAXPROCESSINGDATE = MAX(DAY_DT)
FROM  STG_EDW.DLY_P_MDS_HCY_LVL_TN_HST

DECLARE @COUNTER INT = 1;

WHILE @COUNTER <= @NUMBEROFPARTITIONS
BEGIN
    PRINT @COUNTER;



/*PARTITION SWITCHING OUT AND IN */
DECLARE @PARTITIONDATE INT, @PROCESSINGDAY DATE, @PARTITIONDATESTART DATE, @PARTITIONDATEEND AS DATE, @PARTITIONDATESTARTKEY AS INT, @PARTITIONDATEENDKEY AS INT
-- GET LATEST PROCESSING DAY


-- GET BOUNDARY VALUES FOR SOURCE QUERY
SET @PROCESSINGDAY = @NEXTPROCESSINGSTARTDATE
SET @PROCESSINGENDDATE = CASE WHEN @MAXPROCESSINGDATE < EOMONTH(@NEXTPROCESSINGSTARTDATE) THEN @MAXPROCESSINGDATE ELSE EOMONTH(@NEXTPROCESSINGSTARTDATE) END

-- GET BEGINNING OF PARTITION VALUE AND END OF PARTITION VALUE
SELECT @PARTITIONDATESTART = DATEADD(M,DATEDIFF(M,0,@PROCESSINGDAY),0)
SELECT @PARTITIONDATEEND = EOMONTH(DATEADD(M,DATEDIFF(M,0,@PROCESSINGDAY),0))
SELECT @PARTITIONDATESTARTKEY = CAST(CONVERT(VARCHAR,@PARTITIONDATESTART,112) AS INT)
SELECT @PARTITIONDATEENDKEY = CAST(CONVERT(VARCHAR,@PARTITIONDATEEND,112) AS INT)

SELECT @PARTITIONDATESTART
SELECT @PARTITIONDATEEND
SELECT @PARTITIONDATESTARTKEY
SELECT @PARTITIONDATEENDKEY





--GET PARTITION NUMBER
SELECT @PARTITIONDATESTARTKEY
DECLARE @PNUMBER INT;
EXEC ETL.PROC_GET_PARTITION_NUMBER
@SCHEMA = 'DM',
@TABLENAME='FCT_DLY_SL_MB_TXN_P_SUB_CT',
@PARTITIONVALUE = @PARTITIONDATESTARTKEY,
@PARTITIONNUMBER = @PNUMBER  OUTPUT ;
SELECT @PNUMBER


IF OBJECT_ID('DM_EDW.FCT_DLY_SL_MB_TXN_P_SUB_CT_OUT') IS NOT NULL
BEGIN
    DROP TABLE DM_EDW.FCT_DLY_SL_MB_TXN_P_SUB_CT_OUT
END



CREATE TABLE DM_EDW.FCT_DLY_SL_MB_TXN_P_SUB_CT_OUT
WITH
(
	DISTRIBUTION = HASH ( UT_ID ),
	CLUSTERED COLUMNSTORE INDEX,
	PARTITION
		
	)

)
AS
SELECT *
FROM    DM.FCT_DLY_SL_MB_TXN_P_SUB_CT
WHERE 1=2
OPTION (LABEL = 'CTAS : PARTITION SWITCH IN : UPDATE')
;

IF OBJECT_ID('DM_EDW.FCT_DLY_SL_MB_TXN_P_SUB_CT_IN') IS NOT NULL
BEGIN
    DROP TABLE DM_EDW.FCT_DLY_SL_MB_TXN_P_SUB_CT_IN
END

CREATE TABLE DM_EDW.FCT_DLY_SL_MB_TXN_P_SUB_CT_IN
WITH
(
	DISTRIBUTION = HASH ( UT_ID ),
	CLUSTERED COLUMNSTORE INDEX,
	PARTITION
		
	)

)
AS
SELECT *
FROM    DM.FCT_DLY_SL_MB_TXN_P_SUB_CT
WHERE    TM_SKY BETWEEN @PARTITIONDATESTARTKEY AND @PARTITIONDATEENDKEY
AND NOT EXISTS
(
SELECT 1
FROM
	(
		SELECT DISTINCT
		REPLACE(CAST(DAY_DT  AS DATE),'-','') AS DAY_DT
		FROM  STG_EDW.DLY_P_MDS_HCY_LVL_TN_HST
		WHERE
		CAST(DAY_DT AS DATE)   BETWEEN @PROCESSINGDAY AND @PROCESSINGENDDATE
	) AS INCL
WHERE
TM_SKY = DAY_DT
)
OPTION (LABEL = 'CTAS : PARTITION SWITCH IN : UPDATE')
;


IF OBJECT_ID('DM_EDW.PK_FCT_DLY_SL_MB_TXN_P_SUB_CT_IN') IS NULL
BEGIN
DECLARE @SQL_ALTER NVARCHAR(4000) = '
ALTER TABLE DM_EDW.FCT_DLY_SL_MB_TXN_P_SUB_CT_IN  ADD CONSTRAINT PK_FCT_DLY_SL_MB_TXN_P_SUB_CT_IN
PRIMARY KEY NONCLUSTERED
(
		GEO_HST_SKY ASC,
		TM_SKY ASC,
		CHNL_HST_SKY ASC,
		P_CT_BUS_KEY ASC
) NOT ENFORCED;'

EXEC SP_EXECUTESQL @SQL_ALTER
END


;WITH TYDT AS
(SELECT
        P_MDS_HCY_LVL_ID,
        UT_ID,
        DAY_DT,
        CAST(SHOP_CHNL_CT AS  VARCHAR(3))
			+ '-' + MBL_SLF_CHKOT_FLG
			+ '-'  + MPERK_TN_CT            AS CHNL_BUS_KEY,
        SUM(FNC_TN_CNT) 					AS TY_FNC_TN_CNT,
		1 AS DUMMY

FROM        STG_EDW.DLY_P_MDS_HCY_LVL_TN_HST
WHERE
DAY_DT   BETWEEN @PROCESSINGDAY AND @PROCESSINGENDDATE
GROUP BY	P_MDS_HCY_LVL_ID,	UT_ID,	SHOP_CHNL_CT,
			MBL_SLF_CHKOT_FLG,	DAY_DT,	MPERK_TN_CT
)


INSERT INTO DM_EDW.FCT_DLY_SL_MB_TXN_P_SUB_CT_IN
SELECT
		GEO_HST_SKY									AS GEO_HST_SKY,
		REPLACE(CAST(SRC.DAY_DT  AS DATE),'-','')	AS TM_SKY,
		CHNL_HST_SKY								AS CHNL_HST_SKY,
		SRC.P_MDS_HCY_LVL_ID 						AS P_CT_BUS_KEY,
		SRC.UT_ID									AS UT_ID,
		SRC.TY_FNC_TN_CNT 						AS FNC_TN_CNT,
		@NEW_AUD_SKY	AS AUD_INS_SKY,
		NULL			AS AUD_UPD_SKY

FROM TYDT AS SRC

LEFT  JOIN
(SELECT 			CHNL_HST_SKY,
						CHNL_BUS_KEY,
						SHOP_AND_SCN_FLG,
						DGTL_UT_FLG
			FROM DM.DIM_CHNL
			WHERE 		IS_CURR<>0
			) CHNL
ON 			SRC.CHNL_BUS_KEY= CHNL.CHNL_BUS_KEY

LEFT  JOIN	(SELECT 		GEO_HST_SKY,
						UT_ID,
						ST_CLS
			FROM 		DM.DIM_GEO
			WHERE 		IS_CURR<>0
					) AS GEO
	ON GEO.UT_ID = SRC.UT_ID



BEGIN

SELECT @NBR_OF_RW_ISRT = COUNT(1)  FROM DM_EDW.FCT_DLY_SL_MB_TXN_P_SUB_CT_IN WHERE AUD_INS_SKY = @NEW_AUD_SKY
SELECT @NBR_OF_RW_UDT  = COUNT(1)  FROM DM_EDW.FCT_DLY_SL_MB_TXN_P_SUB_CT_IN WHERE AUD_UPD_SKY = @NEW_AUD_SKY

SET @NBR_OF_RW_UDT_TOTAL = @NBR_OF_RW_UDT_TOTAL + @NBR_OF_RW_UDT
SET @NBR_OF_RW_ISRT_TOTAL = @NBR_OF_RW_ISRT_TOTAL + @NBR_OF_RW_ISRT


--SWITCH THE PARTITIONS OVER
DECLARE @SQL NVARCHAR(4000) = '
ALTER TABLE DM.FCT_DLY_SL_MB_TXN_P_SUB_CT    SWITCH PARTITION '+CAST(@PNUMBER AS VARCHAR(20))    +' TO DM_EDW.FCT_DLY_SL_MB_TXN_P_SUB_CT_OUT PARTITION '    +CAST(@PNUMBER AS VARCHAR(20))+';
ALTER TABLE DM_EDW.FCT_DLY_SL_MB_TXN_P_SUB_CT_IN SWITCH PARTITION '+CAST(@PNUMBER AS VARCHAR(20))    +' TO DM.FCT_DLY_SL_MB_TXN_P_SUB_CT PARTITION '        +CAST(@PNUMBER AS VARCHAR(20))+';'
EXEC SP_EXECUTESQL @SQL

--PERFORM THE CLEAN-UP
TRUNCATE TABLE DM_EDW.FCT_DLY_SL_MB_TXN_P_SUB_CT_OUT;
TRUNCATE TABLE DM_EDW.FCT_DLY_SL_MB_TXN_P_SUB_CT_IN;

DROP TABLE DM_EDW.FCT_DLY_SL_MB_TXN_P_SUB_CT_OUT
DROP TABLE DM_EDW.FCT_DLY_SL_MB_TXN_P_SUB_CT_IN

END


SET @COUNTER = @COUNTER + 1;
SET @NEXTPROCESSINGSTARTDATE = DATEADD(D,1,@PROCESSINGENDDATE)

END

/*AUDIT LOG END*/
EXEC ETL.AUDIT_DATA_LOAD_END @AUD_SKY = @NEW_AUD_SKY, @NBR_OF_RW_ISRT = @NBR_OF_RW_ISRT_TOTAL, @NBR_OF_RW_UDT  = @NBR_OF_RW_UDT_TOTAL

END  TRY
BEGIN CATCH
DECLARE @ERROR_PROCEDURE_NAME AS VARCHAR(60) = '[ETL].[PROC_FCT_DLY_SL_MB_TXN_P_SUB_CT_INITIAL_TABLELOAD]'
DECLARE @ERROR_LINE AS INT;
DECLARE @ERROR_MSG AS NVARCHAR(max);

 SELECT
      @ERROR_LINE =  ERROR_NUMBER()
       ,@ERROR_MSG = ERROR_MESSAGE();
--------- Log execution error ----------



EXEC [ETL].[LOG_AUD_ERR]
@AUD_SKY = @NEW_AUD_SKY,
@ERROR_PROCEDURE_NAME = @ERROR_PROCEDURE_NAME,
@ERROR_LINE = @ERROR_LINE,
@ERROR_MSG = @ERROR_MSG;


   THROW;




END CATCH
GO
