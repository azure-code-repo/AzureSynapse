
CREATE PROC [ETL].[PROC_DIM_GEO_TABLELOAD] AS


BEGIN TRY

/*Datamart Auditing variables*/
DECLARE @NEW_AUD_SKY BIGINT
DECLARE @NBR_OF_RW_ISRT INT
DECLARE @NBR_OF_RW_UDT INT
DECLARE @EXEC_LYR VARCHAR(255)
DECLARE @EXEC_JOB VARCHAR(500)
DECLARE @SRC_ENTY VARCHAR(500)
DECLARE @TGT_ENTY VARCHAR(500)

/*Audit Log Start*/
EXEC ETL.AUDIT_DATA_LOAD_START
 @EXEC_LYR  = 'DM'
,@EXEC_JOB  = 'PROC_DIM_GEO_TABLELOAD'
,@SRC_ENTY  = 'DIM_GEO_TMP'
,@TGT_ENTY = 'DIM_GEO'
,@NEW_AUD_SKY = @NEW_AUD_SKY OUTPUT






;WITH CTE AS
(
SELECT

				stg.GEO_HST_SKY
				,stg.GEO_SKY
				,stg.UT_ID
				,stg.UT_DSC
				,stg.UNIT_SQF
				,stg.RGN
				,stg.OPR_MKT
				,stg.DIV_ID
				,stg.DIV_NM
				,stg.UT_LNGT
				,stg.UT_LAT
				,stg.CITY
				,stg.ST
				,stg.ZIP
				,stg.CNTY
				,stg.NW_STO_TY_FLG
				,stg.NW_STO_LY_FLG
				,stg.NW_STO_2LY_FLG
				,stg.ST_CLS_ID
				,stg.ST_CLS
				,stg.VLD_FROM
				,stg.VLD_TO
				,stg.IS_CURR
				,stg.IS_DMY
				,stg.IS_EMBR
FROM  		DM_EDW.DIM_GEO_TMP stg
INNER JOIN	DM.DIM_GEO  dim
ON 			stg.GEO_HST_SKY = dim.GEO_HST_SKY)

UPDATE dm.DIM_GEO
SET
		 GEO_HST_SKY 		= CTE.GEO_HST_SKY
		,GEO_SKY 			= CTE.GEO_SKY
		,UT_ID 				= CTE.UT_ID
		,UT_DSC				= CTE.UT_DSC
		,UNIT_SQF			= CTE.UNIT_SQF
		,RGN 				= CTE.RGN
		,OPR_MKT 			= CTE.OPR_MKT
		,DIV_ID 			= CTE.DIV_ID
		,DIV_NM 			= CTE.DIV_NM
		,UT_LNGT     		= CTE.UT_LNGT
		,UT_LAT      		= CTE.UT_LAT
		,CITY        		= CTE.CITY
		,ST          		= CTE.ST
		,ZIP         		= CTE.ZIP
		,CNTY        		= CTE.CNTY
		,NW_STO_TY_FLG  	= CTE.NW_STO_TY_FLG
		,NW_STO_LY_FLG  	= CTE.NW_STO_LY_FLG
		,NW_STO_2LY_FLG 	= CTE.NW_STO_2LY_FLG
		,ST_CLS_ID   		= CTE.ST_CLS_ID
		,ST_CLS     		= CTE.ST_CLS

		,VLD_FROM 			= CTE.VLD_FROM
		,VLD_TO 			= CTE.VLD_TO
		,IS_CURR 			= CTE.IS_CURR
		,ETL_ACT			= 'Update'
		,AUD_UPD_SKY		= @NEW_AUD_SKY
FROM 	CTE,	dm.DIM_GEO DIM1
WHERE	CTE.GEO_HST_SKY= DIM1.GEO_HST_SKY


INSERT INTO DM.DIM_GEO

SELECT
		GEO_HST_SKY 	,
		GEO_SKY 		,
		UT_ID,
		UT_DSC,
		UNIT_SQF,
		RGN,
		OPR_MKT,
		UT_LNGT,
		UT_LAT,
		ST_CLS_ID,
		ST_CLS,
		ST,
		CNTY,
		CITY,
		ZIP,
		DIV_ID,
		DIV_NM,
		NW_STO_TY_FLG,
		NW_STO_LY_FLG,
		NW_STO_2LY_FLG,
		VLD_FROM 		,
		VLD_TO 			,
		IS_CURR 		,
		0 				AS IS_DMY,
		0 				AS IS_EMBR,
		'Insert' 		AS ETL_ACT,
		@NEW_AUD_SKY 	AS AUD_INS_KEY,
		NULL 			AS AUD_UPD_SKY

FROM 	dm_edw.DIM_GEO_TMP
WHERE	GEO_HST_SKY NOT IN(
SELECT 	GEO_HST_SKY FROM   DM.DIM_GEO)

BEGIN

SELECT @NBR_OF_RW_ISRT = COUNT(1)  FROM DM.DIM_GEO WHERE [AUD_INS_SKY] = @NEW_AUD_SKY
SELECT @NBR_OF_RW_UDT  = COUNT(1)  FROM DM.DIM_GEO WHERE [AUD_UPD_SKY] = @NEW_AUD_SKY

END

/*Audit Log End*/
EXEC ETL.AUDIT_DATA_LOAD_END @AUD_SKY = @NEW_AUD_SKY, @NBR_OF_RW_ISRT = @NBR_OF_RW_ISRT, @NBR_OF_RW_UDT  = @NBR_OF_RW_UDT

END TRY
BEGIN CATCH
DECLARE @ERROR_PROCEDURE_NAME AS VARCHAR(60) = '[ETL].[PROC_DIM_GEO_TABLELOAD]'
DECLARE @ERROR_LINE AS INT;
DECLARE @ERROR_MSG AS NVARCHAR(max);

 SELECT
      @ERROR_LINE =  ERROR_NUMBER()
       ,@ERROR_MSG = ERROR_MESSAGE();
--------- Log execution error ----------



EXEC [ETL].[LOG_AUD_ERR]
@AUD_SKY = @NEW_AUD_SKY,
@ERROR_PROCEDURE_NAME = @ERROR_PROCEDURE_NAME,
@ERROR_LINE = @ERROR_LINE,
@ERROR_MSG = @ERROR_MSG;


   THROW;




END CATCH
GO
