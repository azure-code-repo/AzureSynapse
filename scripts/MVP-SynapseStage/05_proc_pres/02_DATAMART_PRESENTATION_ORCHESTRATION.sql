
IF EXISTS(SELECT TOP  1 * FROM SYS.OBJECTS WHERE OBJECT_ID = OBJECT_ID('ETL.EXECUTE_STORED_PROCEDURE'))
DROP PROCEDURE ETL.EXECUTE_STORED_PROCEDURE;
GO


CREATE PROCEDURE ETL.EXECUTE_STORED_PROCEDURE
(
 @STOREDPROCEDURE NVARCHAR(255)
,@AUD_SKY [bigint]
)
AS
BEGIN

DECLARE @SQL NVARCHAR(2000)

	BEGIN
		SET @SQL =N'EXEC '+ @STOREDPROCEDURE + N' @AUD_SKY = @AUD_SKY'
		EXECUTE SP_EXECUTESQL @SQL, N'@AUD_SKY bigint', @AUD_SKY = @AUD_SKY
	END

END
GO


IF EXISTS(SELECT TOP  1 * FROM SYS.OBJECTS WHERE OBJECT_ID = OBJECT_ID('ETL.DM_PRSNT_ORCHRSTN_MDATA'))
DROP TABLE ETL.DM_PRSNT_ORCHRSTN_MDATA;
GO

CREATE TABLE ETL.DM_PRSNT_ORCHRSTN_MDATA
(
ORCHESTRATION_SKY bigint IDENTITY(1,1) NOT NULL,
TABLENAME VARCHAR(255) NOT NULL,
EXECUTIONSTEPS VARCHAR(255) NOT NULL,
BATCHNUMBER [smallint] ,
ORDERNUMBER [smallint] ,

 CONSTRAINT [PK_DM_PRSNT_ORCHRSTN_MDATA] PRIMARY KEY NONCLUSTERED
	(
		[ORCHESTRATION_SKY] ASC,
		[TABLENAME] ASC,
		[BATCHNUMBER] ASC,
		[ORDERNUMBER] ASC
	) NOT ENFORCED
)
WITH
(
	DISTRIBUTION = ROUND_ROBIN
)
GO




INSERT INTO ETL.DM_PRSNT_ORCHRSTN_MDATA VALUES('FCT_DLY_SL_P_SUB_CT','ETL.GET_FCT_DLY_SL_P_SUB_CT_INCR_KEYS',1,1)
INSERT INTO ETL.DM_PRSNT_ORCHRSTN_MDATA VALUES('FCT_DLY_SL_P_SUB_CT','ETL.GET_FCT_DLY_SL_P_SUB_CT_INCR_LY_CLDR',2,1)
INSERT INTO ETL.DM_PRSNT_ORCHRSTN_MDATA VALUES('FCT_DLY_SL_P_SUB_CT','ETL.GET_FCT_DLY_SL_P_SUB_CT_INCR_LY_FSC',2,2)
INSERT INTO ETL.DM_PRSNT_ORCHRSTN_MDATA VALUES('FCT_DLY_SL_P_SUB_CT','ETL.GET_FCT_DLY_SL_P_SUB_CT_INCR_LY_HLDY',2,3)
INSERT INTO ETL.DM_PRSNT_ORCHRSTN_MDATA VALUES('FCT_DLY_SL_P_SUB_CT','ETL.GET_FCT_DLY_SL_P_SUB_CT_INCR_CURR_PLN',2,4)
INSERT INTO ETL.DM_PRSNT_ORCHRSTN_MDATA VALUES('FCT_DLY_SL_P_SUB_CT','ETL.GET_FCT_DLY_SL_P_SUB_CT_CALC',3,1)
INSERT INTO ETL.DM_PRSNT_ORCHRSTN_MDATA VALUES('FCT_DLY_SL_P_SUB_CT','ETL.FCT_DLY_SL_P_SUB_CT_CALC_UPSERT',4,1)

INSERT INTO ETL.DM_PRSNT_ORCHRSTN_MDATA VALUES('FCT_DLY_SL_MB_P_SUB_CT','ETL.GET_FCT_DLY_SL_MB_P_SUB_CT_INCR_KEYS',1,1)
INSERT INTO ETL.DM_PRSNT_ORCHRSTN_MDATA VALUES('FCT_DLY_SL_MB_P_SUB_CT','ETL.GET_FCT_DLY_SL_MB_P_SUB_CT_INCR_LY_CLDR',2,1)
INSERT INTO ETL.DM_PRSNT_ORCHRSTN_MDATA VALUES('FCT_DLY_SL_MB_P_SUB_CT','ETL.GET_FCT_DLY_SL_MB_P_SUB_CT_INCR_LY_FSC',2,2)
INSERT INTO ETL.DM_PRSNT_ORCHRSTN_MDATA VALUES('FCT_DLY_SL_MB_P_SUB_CT','ETL.GET_FCT_DLY_SL_MB_P_SUB_CT_INCR_LY_HLDY',2,3)
INSERT INTO ETL.DM_PRSNT_ORCHRSTN_MDATA VALUES('FCT_DLY_SL_MB_P_SUB_CT','ETL.GET_FCT_DLY_SL_MB_P_SUB_CT_INCR_CURR',2,4)
INSERT INTO ETL.DM_PRSNT_ORCHRSTN_MDATA VALUES('FCT_DLY_SL_MB_P_SUB_CT','ETL.GET_FCT_DLY_SL_MB_P_SUB_CT_CALC',3,1)
INSERT INTO ETL.DM_PRSNT_ORCHRSTN_MDATA VALUES('FCT_DLY_SL_MB_P_SUB_CT','ETL.FCT_DLY_SL_MB_P_SUB_CT_CALC_UPSERT',4,1)



INSERT INTO ETL.DM_PRSNT_ORCHRSTN_MDATA VALUES('FCT_DLY_SL_MB_TXN_P_SUB_CT','ETL.GET_FCT_DLY_SL_MB_TXN_P_SUB_CT_INCR_KEYS',1,1)
INSERT INTO ETL.DM_PRSNT_ORCHRSTN_MDATA VALUES('FCT_DLY_SL_MB_TXN_P_SUB_CT','ETL.GET_FCT_DLY_SL_MB_TXN_P_SUB_CT_INCR_LY_CLDR',2,1)
INSERT INTO ETL.DM_PRSNT_ORCHRSTN_MDATA VALUES('FCT_DLY_SL_MB_TXN_P_SUB_CT','ETL.GET_FCT_DLY_SL_MB_TXN_P_SUB_CT_INCR_LY_FSC',2,2)
INSERT INTO ETL.DM_PRSNT_ORCHRSTN_MDATA VALUES('FCT_DLY_SL_MB_TXN_P_SUB_CT','ETL.GET_FCT_DLY_SL_MB_TXN_P_SUB_CT_INCR_LY_HLDY',2,3)
INSERT INTO ETL.DM_PRSNT_ORCHRSTN_MDATA VALUES('FCT_DLY_SL_MB_TXN_P_SUB_CT','ETL.GET_FCT_DLY_SL_MB_TXN_P_SUB_CT_INCR_CURR',2,4)
INSERT INTO ETL.DM_PRSNT_ORCHRSTN_MDATA VALUES('FCT_DLY_SL_MB_TXN_P_SUB_CT','ETL.GET_FCT_DLY_SL_MB_TXN_P_SUB_CT_CALC',3,1)
INSERT INTO ETL.DM_PRSNT_ORCHRSTN_MDATA VALUES('FCT_DLY_SL_MB_TXN_P_SUB_CT','ETL.FCT_DLY_SL_MB_TXN_P_SUB_CT_CALC_UPSERT',4,1)




INSERT INTO ETL.DM_PRSNT_ORCHRSTN_MDATA VALUES('FCT_WK_STRT_INV_P_SUB_CT','ETL.GET_FCT_WK_STRT_INV_P_SUB_CT_INCR_KEYS',1,1)
INSERT INTO ETL.DM_PRSNT_ORCHRSTN_MDATA VALUES('FCT_WK_STRT_INV_P_SUB_CT','ETL.GET_FCT_WK_STRT_INV_P_SUB_CT_INCR_LY_CLDR',2,1)
INSERT INTO ETL.DM_PRSNT_ORCHRSTN_MDATA VALUES('FCT_WK_STRT_INV_P_SUB_CT','ETL.GET_FCT_WK_STRT_INV_P_SUB_CT_INCR_LY_FSC',2,2)
INSERT INTO ETL.DM_PRSNT_ORCHRSTN_MDATA VALUES('FCT_WK_STRT_INV_P_SUB_CT','ETL.GET_FCT_WK_STRT_INV_P_SUB_CT_INCR_LY_HLDY',2,3)
INSERT INTO ETL.DM_PRSNT_ORCHRSTN_MDATA VALUES('FCT_WK_STRT_INV_P_SUB_CT','ETL.GET_FCT_WK_STRT_INV_P_SUB_CT_INCR_CURR',2,4)
INSERT INTO ETL.DM_PRSNT_ORCHRSTN_MDATA VALUES('FCT_WK_STRT_INV_P_SUB_CT','ETL.GET_FCT_WK_STRT_INV_P_SUB_CT_CALC',3,1)
INSERT INTO ETL.DM_PRSNT_ORCHRSTN_MDATA VALUES('FCT_WK_STRT_INV_P_SUB_CT','ETL.FCT_WK_STRT_INV_P_SUB_CT_CALC_UPSERT',4,1)

GO
IF EXISTS(SELECT TOP  1 * FROM SYS.OBJECTS WHERE OBJECT_ID = OBJECT_ID('ETL.GET_DATAMART_LOAD_EXECUTIONBATCH'))
DROP PROCEDURE ETL.GET_DATAMART_LOAD_EXECUTIONBATCH;
GO


CREATE PROCEDURE ETL.GET_DATAMART_LOAD_EXECUTIONBATCH
(
 @TABLENAME VARCHAR(255)
)
AS
BEGIN

SELECT
	DISTINCT
	TABLENAME ,
	BATCHNUMBER
FROM ETL.DM_PRSNT_ORCHRSTN_MDATA
WHERE
TABLENAME = @TABLENAME
ORDER BY BATCHNUMBER ASC
END


GO

IF EXISTS(SELECT TOP  1 * FROM SYS.OBJECTS WHERE OBJECT_ID = OBJECT_ID('ETL.GET_DATAMART_LOAD_EXECUTIONSTEPS'))
DROP PROCEDURE ETL.GET_DATAMART_LOAD_EXECUTIONSTEPS;
GO


CREATE PROCEDURE ETL.GET_DATAMART_LOAD_EXECUTIONSTEPS
(
 @TABLENAME VARCHAR(255)
 ,@BATCHNUMBER SMALLINT
)
AS
BEGIN

SELECT
    [ORCHESTRATION_SKY],
	TABLENAME,
	EXECUTIONSTEPS,
	ORDERNUMBER
FROM ETL.DM_PRSNT_ORCHRSTN_MDATA
WHERE
TABLENAME = @TABLENAME
AND BATCHNUMBER = @BATCHNUMBER
ORDER BY ORDERNUMBER ASC
END

GO

IF EXISTS(SELECT TOP  1 * FROM SYS.OBJECTS WHERE OBJECT_ID = OBJECT_ID('ETL.DM_PRSNT_ORCHRSTN_LOG'))
DROP TABLE ETL.DM_PRSNT_ORCHRSTN_LOG;
GO

CREATE TABLE ETL.DM_PRSNT_ORCHRSTN_LOG
(
	ORCHESTRATION_LOG_SKY bigint IDENTITY(1,1) NOT NULL,
	ORCHESTRATION_SKY bigint,
	[EXEC_STRT_TS] [datetime] NOT NULL,
	[EXEC_END_TS] [datetime] NULL,
	[EXEC_USID] [varchar](255) NOT NULL,
	[ORCHESTRATION_STS] [char](1) NULL,
CONSTRAINT [PK_DM_PRSNT_ORCHRSTN_LOG] PRIMARY KEY NONCLUSTERED
	(
		ORCHESTRATION_LOG_SKY ASC,
		[EXEC_STRT_TS] ASC
	) NOT ENFORCED
)
WITH
(
	DISTRIBUTION = ROUND_ROBIN
)
GO


IF EXISTS(SELECT TOP  1 * FROM SYS.OBJECTS WHERE OBJECT_ID = OBJECT_ID('ETL.LOG_DATAMART_LOAD_EXECUTIONSTEPS_START'))
DROP PROCEDURE ETL.LOG_DATAMART_LOAD_EXECUTIONSTEPS_START;
GO


CREATE PROCEDURE ETL.LOG_DATAMART_LOAD_EXECUTIONSTEPS_START
(
 @ORCHESTRATION_SKY bigint
)
AS
BEGIN

DECLARE @EXECUTIONSTARTTIME DATETIME = GETUTCDATE()
DECLARE @ORCHESTRATION_LOG_SKY [BIGINT]
INSERT INTO ETL.DM_PRSNT_ORCHRSTN_LOG
(
	ORCHESTRATION_SKY,
	[EXEC_STRT_TS] ,
	[EXEC_END_TS] ,
	[EXEC_USID] ,
	[ORCHESTRATION_STS]
)
SELECT
@ORCHESTRATION_SKY,
@EXECUTIONSTARTTIME,
NULL,
USER_NAME(),
'P'


SELECT
	@ORCHESTRATION_LOG_SKY = ORCHESTRATION_LOG_SKY
FROM ETL.DM_PRSNT_ORCHRSTN_LOG
WHERE
ORCHESTRATION_SKY = @ORCHESTRATION_SKY
AND EXEC_STRT_TS = @EXECUTIONSTARTTIME

SELECT @ORCHESTRATION_LOG_SKY AS ORCHESTRATION_LOG_SKY

END

GO

IF EXISTS(SELECT TOP  1 * FROM SYS.OBJECTS WHERE OBJECT_ID = OBJECT_ID('ETL.LOG_DATAMART_LOAD_EXECUTIONSTEPS_END'))
DROP PROCEDURE ETL.LOG_DATAMART_LOAD_EXECUTIONSTEPS_END;
GO


CREATE PROCEDURE ETL.LOG_DATAMART_LOAD_EXECUTIONSTEPS_END
(
@ORCHESTRATION_LOG_SKY [BIGINT]
)
AS
BEGIN

DECLARE @EXECUTIONENDTIME DATETIME = GETUTCDATE()

UPDATE ETL.DM_PRSNT_ORCHRSTN_LOG
SET
EXEC_END_TS = @EXECUTIONENDTIME
,[ORCHESTRATION_STS] = 'C'
FROM ETL.DM_PRSNT_ORCHRSTN_LOG
WHERE
ORCHESTRATION_LOG_SKY = @ORCHESTRATION_LOG_SKY

END
